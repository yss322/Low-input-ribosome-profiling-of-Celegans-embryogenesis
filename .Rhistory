height =240,
units = c("mm"),
dpi = 600,
bg = NULL)
# Create the combined figure
Panel_S9_raw <- (
(plot_RNA_W1vO1 + plot_Ribo_W1vO1 + plot_layout(nrow = 1)) /
(plot_RNA_W2vO2 + plot_Ribo_W2vO2 + plot_layout(nrow = 1)) /
(plot_RNA_W4vO4 + plot_Ribo_W4vO4 + plot_layout(nrow = 1)) /
(plot_RNA_O2vO1 + plot_Ribo_O2vO1 + plot_layout(nrow = 1)) /
(plot_RNA_O4vO2 + plot_Ribo_O4vO2 + plot_layout(nrow = 1))
)
# Final panel with collected guides at bottom
Panel_S9 <- Panel_S9_raw +
plot_layout(guides = "collect",) &
theme(legend.position = "bottom")
ggsave(
"./output/Figures/Figure_S9/Panel_S9.pdf",
plot = Panel_S9 ,
width =180,
height =240,
units = c("mm"),
dpi = 600,
bg = NULL)
ggsave(
"./output/Figures/Figure_S9/Panel_S9.pdf",
plot = Panel_S9 ,
width =170,
height =240,
units = c("mm"),
dpi = 600,
bg = NULL)
Figure_S3_D <- yash_vs_quarato_all
Figure_S3_E <-  yash_vs_lee_all
Figure_S3_C <- yash_vs_quarato_all
Figure_S3_C <- yash_vs_quarato_all
ggsave(
"./output/Figures/Figure_S3/Figure_S3_C.pdf",
plot = Figure_S3_C  ,
width =180,
height =65,
units = c("mm"),
dpi = 600,
bg = NULL)
ggsave(
"./output/Figures/Figure_S3/Figure_S3_D.pdf",
plot = Figure_S3_D  ,
width =180,
height =65,
units = c("mm"),
dpi = 600,
bg = NULL)
Figure_S3_C <- yash_vs_quarato_all
Figure_S3_D <-  yash_vs_lee_all
ggsave(
"./output/Figures/Figure_S3/Figure_S3_C.pdf",
plot = Figure_S3_C  ,
width =180,
height =65,
units = c("mm"),
dpi = 600,
bg = NULL)
ggsave(
"./output/Figures/Figure_S3/Figure_S3_D.pdf",
plot = Figure_S3_D  ,
width =180,
height =65,
units = c("mm"),
dpi = 600,
bg = NULL)
ggsave(
"./output/Figures/Figure_S10/Figure_S10.pdf",
plot = Figure_S10  ,
width =140,
height =70,
units = c("mm"),
dpi = 600,
bg = NULL)
ggsave(
"./output/Figures/Figure_S3/Figure_S5_A.pdf",
plot = Figure_S5_A ,
width =110,
height =80,
units = c("mm"),
dpi = 600,
bg = NULL)
Figure_S5_A <- example_from_publication
ggsave(
"./output/Figures/Figure_S3/Figure_S5_A.pdf",
plot = Figure_S5_A ,
width =110,
height =80,
units = c("mm"),
dpi = 600,
bg = NULL)
example_from_publication<- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_brewer(palette = "Set1")  +   scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
plot_table <-  as.data.frame(averaged_clr_TE)
plot_table_long <-  pivot_longer(plot_table,
cols = -gene_name, # Select all columns except gene_name for pivoting
names_to = "cell_stage",
values_to = "TE")
plot_table_long$cell_stage <- factor(plot_table_long$cell_stage,c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE","oma_one_cell_TE","oma_two_cell_TE","oma_four_cell_TE"))
target_gene <- c("gpd-4","pal-1","mom-2","neg-1","nos-2","cam-1","lag-1","dsh-2")
gene_to_plot <- plot_table_long |> filter(gene_name %in% target_gene ) |> filter(cell_stage %in%c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))
example_from_publication<- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_brewer(palette = "Set1")  +   scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
example_from_publication<- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999"))  +   scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
install.packages("ggsci")
library(ggsci)
example_from_publication<- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_npg()  +   scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_aaas()  +   scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_viridis_d(option = "turbo")+   scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_brewer(palette = "Set3") + scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999"))  + scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
Figure_S5_A <- example_from_publication
ggsave(
"./output/Figures/Figure_S3/Figure_S5_A.pdf",
plot = Figure_S5_A ,
width =110,
height =80,
units = c("mm"),
dpi = 600,
bg = NULL)
# Set seed for reproducibility
set.seed(123)
# Prepare the data
wt_data <- averaged_clr_TE[, c(1,2:5)]
colnames(wt_data) <- c("gene_name", "1", "2", "4", "8")
# Function to prepare data
prepare_data <- function(data) {
gene_names <- data$gene_name
data_prepared <- as.matrix(data[, -1])  # Exclude the gene_name column
rownames(data_prepared) <- gene_names
return(data_prepared)
}
# Function to center the data to mean (for clustering)
center_to_mean <- function(data) {
return(t(scale(t(data), center = TRUE, scale = FALSE)))
}
# Function to center the data to 1-cell stage (for visualization)
center_to_1cell <- function(data) {
return(t(apply(data, 1, function(row) row - row[1])))
}
# Function to convert numbers to Roman numerals
to_roman <- function(x) {
roman <- as.roman(x)
return(as.character(roman))
}
wt_prepared <- prepare_data(wt_data)
wt_centered_mean <- center_to_mean(wt_prepared)
wt_centered_1cell <- center_to_1cell(wt_prepared)
# Perform clustering on mean-centered data
cluster_data <- function(data, k = 9) {
set.seed(123)  # for reproducibility
km <- kmeans(data, centers = k)
return(km$cluster)
}
wt_clusters <- cluster_data(wt_centered_mean)
combined_results <- data.frame(
gene_name = rownames(wt_prepared),
wt_cluster = wt_clusters
)
# Prepare 1-cell centered data for plotting
plot_data <- as.data.frame(wt_centered_1cell) %>%
mutate(gene_name = rownames(wt_centered_1cell)) %>%
pivot_longer(cols = c("1", "2", "4", "8"),
names_to = "stage",
values_to = "centered_CLR") %>%
right_join(combined_results, by = "gene_name")
# Calculate cluster profiles
wt_cluster_profiles <- plot_data %>%
group_by(wt_cluster, stage) %>%
summarise(
mean_centered_CLR = mean(centered_CLR, na.rm = TRUE),
se_value = sd(centered_CLR) / sqrt(n()),
.groups = "drop"
)
desired_order <- c(1,7,8,5,3,6,2,9,4)   # Modify this to your preferred order
# Count genes in each cluster and create sequential Roman numeral labels
wt_gene_counts <- combined_results %>%
count(wt_cluster) %>%
mutate(
wt_cluster = factor(wt_cluster, levels = desired_order)
) %>%
arrange(wt_cluster) %>%
mutate(
# Create sequential Roman numerals based on the new order
roman_numeral = sapply(1:n(), to_roman),
label = paste0("Cluster ", roman_numeral, "\n(", n, " genes)")
)
# Update factor levels according to desired order
wt_cluster_profiles$wt_cluster <- factor(wt_cluster_profiles$wt_cluster,
levels = desired_order)
# Create the plot
wt_plot <- ggplot(wt_cluster_profiles, aes(x = stage, y = mean_centered_CLR, group = 1)) +
geom_line(color = "black") +
geom_pointrange(aes(ymin = mean_centered_CLR - se_value,
ymax = mean_centered_CLR + se_value),
size = 0.1, color = "black") +
facet_wrap(~ wt_cluster, nrow = 1,
labeller = labeller(wt_cluster = setNames(wt_gene_counts$label, wt_gene_counts$wt_cluster))) +
coord_cartesian(ylim = c(-2.5, 2.5)) +
labs(
x = "Cell-stage",
y = "TE relative to 1-cell stage"
) +
my_custom_theme() +
geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
theme(
strip.background = element_rect(fill = "white"),
strip.text = element_text(size = 8),
legend.position = "none"
)
# check the respective ribooccupancy and RNA
clr_ribo_rna_clust <- merge(averaged_clr_data[,c(1:9)], combined_results, by = "gene_name")
# Step 1: Reshape the data and calculate values relative to one-cell stage
reshaped_data <- clr_ribo_rna_clust %>%
pivot_longer(
cols = -c(gene_name, wt_cluster),
names_to = c("cell_stage", "data_type"),
names_pattern = "(.*)\\.(ribo|rna)",
values_to = "value"
) %>%
group_by(gene_name, data_type) %>%
mutate(
one_cell_value = value[cell_stage == "one_cell"],
relative_value = value - one_cell_value
) %>%
ungroup()
# Step 2: Calculate mean and standard error for each cluster, cell stage, and data type
cluster_profiles <- reshaped_data %>%
group_by(wt_cluster, cell_stage, data_type) %>%
summarise(
mean_relative_value = mean(relative_value, na.rm = TRUE),
se_value = sd(relative_value, na.rm = TRUE) / sqrt(n()),
.groups = "drop"
) %>%
mutate(wt_cluster = factor(wt_cluster, levels = desired_order)) %>%
mutate(cell_stage = recode(cell_stage,
"one_cell" = "1",
"two_cell" = "2",
"four_cell" = "4",
"eight_cell" = "8"))
# Step 3: Count genes in each cluster and create Roman numeral labels
gene_counts <- clr_ribo_rna_clust %>%
count(wt_cluster) %>%
mutate(wt_cluster = factor(wt_cluster, levels = desired_order)) %>%
arrange(wt_cluster) %>%
mutate(
roman_numeral = sapply(1:n(), function(x) as.character(as.roman(x))),
label = paste0("Cluster ", roman_numeral, "\n(", n, " genes)")
)
# Step 4: Create the plot
ribo_rna_cluster <- ggplot(cluster_profiles, aes(x = cell_stage, y = mean_relative_value, color = data_type, group = data_type)) +
geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
geom_line() +
geom_pointrange(aes(ymin = mean_relative_value - se_value,
ymax = mean_relative_value + se_value),
size = 0.2) +
facet_wrap(~ wt_cluster, nrow = 1,
labeller = labeller(wt_cluster = setNames(gene_counts$label, gene_counts$wt_cluster))) +
scale_color_manual(values = c("ribo" = ribo_orange, "rna" = rna_blue),
labels = c("ribo" = "Ribosome Occupancy", "rna" = "RNA abundance")) +
scale_x_discrete(limits = c("1", "2", "4", "8")) +
coord_cartesian(ylim = c(-2.5, 2.5)) +
labs(
y = "Relative to 1-cell",
x = "Cell-stage",
color = "Data Type"
) +
my_custom_theme() +
theme(
strip.background = element_rect(fill = "white"),
strip.text = element_text(size = 0),
legend.position = c(0.25, 0.95),
legend.direction = "horizontal"
)
# Create a named vector for cluster renaming
cluster_names <- setNames(
paste0("Cluster ", sapply(1:length(desired_order), function(x) as.character(as.roman(x)))),
desired_order
)
background_data <- rnaseq_neb_table[apply(rnaseq_neb_table[,-1] > 1, 1, any)]
background_genes <- background_data$gene_name
# Create gene lists by cluster using the same order as wt_plot
wt_gene_lists <- lapply(desired_order, function(cluster_num) {
combined_results %>%
filter(wt_cluster == cluster_num) %>%
pull(gene_name)
})
# Name the lists with Roman numerals to match the plot
names(wt_gene_lists) <- wt_gene_counts$roman_numeral[match(desired_order, wt_gene_counts$wt_cluster)]
# Step 1: Run compareCluster with Roman numeral labels
wt_enrichment_results <- compareCluster(
geneClusters = wt_gene_lists,
fun = "enrichGO",
OrgDb = org.Ce.eg.db,
keyType = "SYMBOL",
ont = "ALL",
pAdjustMethod = "BH",
pvalueCutoff = 0.2,
qvalueCutoff = 0.2,
universe = background_genes
)
# Step 2: Simplify the results
wt_enrichment_simplified <- simplify(wt_enrichment_results, cutoff= 0.5)
# Step 3: Generate enrichment values
enrichment_df <- as.data.frame(wt_enrichment_simplified) %>%
mutate(
# Calculate proper ratios
GeneRatio_num = as.numeric(sapply(strsplit(GeneRatio, "/"), "[", 1)),
GeneRatio_denom = as.numeric(sapply(strsplit(GeneRatio, "/"), "[", 2)),
BgRatio_num = as.numeric(sapply(strsplit(BgRatio, "/"), "[", 1)),
BgRatio_denom = as.numeric(sapply(strsplit(BgRatio, "/"), "[", 2)),
# Calculate actual enrichment
enrichment_ratio = (GeneRatio_num/GeneRatio_denom)/(BgRatio_num/BgRatio_denom)
) %>%
# Sort by Cluster and enrichment_ratio instead of combined score
arrange(Cluster, desc(enrichment_ratio))
enrichment_df_filter_wt <- enrichment_df |> filter(enrichment_ratio> 2)
enrichment_df_mod <- read_csv("./input_data/enrichment_df_modified.csv")
# Calculate term distinctiveness
enrichment_df_mod <- enrichment_df_mod %>%
group_by(Description) %>%
mutate(
max_enrichment = max(enrichment_ratio),
distinctiveness = enrichment_ratio/max_enrichment,
sig_clusters = sum(p.adjust < 0.1),
primary_cluster = Cluster[which.max(enrichment_ratio)]
) %>%
ungroup() %>%
arrange(primary_cluster, sig_clusters, desc(max_enrichment)) %>%
mutate(
# Wrap long descriptions to multiple lines (adjust width as needed)
Description = factor(Description,
levels = unique(Description))
)
enrichment_df_mod <- enrichment_df_mod %>%
group_by(Description) %>%
mutate(
max_enrichment = max(enrichment_ratio),
distinctiveness = enrichment_ratio/max_enrichment,
sig_clusters = sum(p.adjust < 0.1),
# Use the actual Cluster value instead of creating a primary_cluster
cluster_numeric = as.numeric(factor(Cluster, levels = c("I", "II", "III", "IV", "V", "VI", "VII", "VIII", "IX")))
) %>%
ungroup() %>%
arrange(cluster_numeric, desc(enrichment_ratio))
filtered_df <- enrichment_df_mod %>%
filter(p.adjust < 0.1, enrichment_ratio > 2) %>%
group_by(Cluster) %>%
slice_head(n = 5) %>%
ungroup() %>%
mutate(Description = fct_reorder(Description, cluster_numeric))
# Create new plot with filtered terms
enrichment_plot_filtered <- ggplot(filtered_df,
aes(x = factor(Cluster, levels = names(wt_gene_lists)),
y = Description)) +
geom_point(aes(size = enrichment_ratio,
color = -log10(p.adjust))) +
scale_color_gradient(low = UT_BLUE, high = BURNT_ORANGE) +
scale_size_continuous(range = c(2, 8)) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
axis.text.y = element_text(size = 8, hjust = 1),
panel.grid.major = element_line(color = "grey90"),
panel.grid.minor = element_blank(),
legend.position = "right",
legend.title = element_text(size = 9),
legend.text = element_text(size = 8),
lineheight = 3
) +
labs(
x = "Cluster",
y = NULL,
size = "Enrichment\nRatio",
color = "-log10(adj.P)"
)
View(√)
View(wt_enrichment_simplified)
View(wt_enrichment_simplified@compareClusterResult)
target_gene <- c("C24D10.6","Y37E3.8","mrpl-16","mrpl-37","mrpl-41","mrpl-47","mrps-15","mrps-18A","mrps-26","rack-1","rpl-13","rpl-15","rpl-16","rpl-18","rpl-19","rpl-2","rpl-24.1","rpl-25.2","rpl-28","rpl-3","rpl-4","rpl-5","rpl-7","rps-10","rps-12","rps-23","rps-5","rps-9","ubq-2")
gene_to_plot <- plot_table_long |> filter(gene_name %in% target_gene ) |> filter(cell_stage %in%c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999"))  + scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
target_gene <- c("ceh-38","daf-19","egl-18","eor-1","hinf-1","lag-1","lin-26","lin-35","nhr-154","nhr-47","sea-1","sptf-3","tbx-9","zgpa-1")
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
gene_to_plot <- plot_table_long |> filter(gene_name %in% target_gene ) |> filter(cell_stage %in%c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
target_gene <- c("C24D10.6","Y37E3.8","mrpl-16","mrpl-37","mrpl-41","mrpl-47","mrps-15","mrps-18A","mrps-26","rack-1","rpl-13","rpl-15","rpl-16","rpl-18","rpl-19","rpl-2","rpl-24.1","rpl-25.2","rpl-28","rpl-3","rpl-4","rpl-5","rpl-7","rps-10","rps-12","rps-23","rps-5","rps-9","ubq-2","ceh-38","daf-19","egl-18","eor-1","hinf-1","lag-1","lin-26","lin-35","nhr-154","nhr-47","sea-1","sptf-3","tbx-9","zgpa-1")
gene_to_plot <- plot_table_long |> filter(gene_name %in% target_gene ) |> filter(cell_stage %in%c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication
target_gene <- c("C04F5.8","C53A5.17","Y49A3A.3","fars-1","fars-2","fars-3","hoe-1","iars-1","mttu-1","sars-2","tgt-1")
gene_to_plot <- plot_table_long |> filter(gene_name %in% target_gene ) |> filter(cell_stage %in%c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_manual(values = c("#E69F00", "#56B4E9", "#009E73", "#F0E442",
"#0072B2", "#D55E00", "#CC79A7", "#999999"))  + scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
example_from_publication <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
labs(y = "Normalized Translational Efficiency", x = "") +
scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell",
"WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_text_repel(data = gene_to_plot %>%
filter(cell_stage == 'WT_eight_cell_TE'),
aes(x = cell_stage, y = TE, label = gene_name),
nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')
"C04F5.8","C53A5.17","Y49A3A.3","fars-1","fars-2","fars-3","hoe-1","iars-1","mttu-1","sars-2","tgt-1"
example_from_publication
