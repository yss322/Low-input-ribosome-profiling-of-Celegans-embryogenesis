---
title: "Analysis_and_figures"
author: "Yash Shukla"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

# Libraries and Functions

```{r}
# set working directory
requireNamespace("rstudioapi", quietly = TRUE)
script_path <- rstudioapi::getActiveDocumentContext()$path
setwd(dirname(dirname(script_path)))



library(ribor)
library(cowplot)
library(tidyverse)
library(edgeR)
library(data.table)
library(ggpubr)
library(EnhancedVolcano)
library(biomaRt)
library(gridExtra)
library(patchwork)
library(RColorBrewer)
library(S4Vectors)
library(sva)
library(gghighlight)
library(ggrepel)
library(ggpmisc)
library(stringr)
library(janitor)
library(ggbeeswarm)
library(pheatmap)
library(scales)
library(clusterProfiler)
library(biomaRt)
library(patchwork)
library(dplyr)
library(clusterProfiler)
library(org.Ce.eg.db)
library(GO.db)
library(tibble)
library(stringr)
FONT_LABEL_SIZE = 8
FONT_TITLE_SIZE = 9

PDF_resolution = 600
FIGURE_FONT    = "helvetica"

BURNT_ORANGE = "#bf5700"
UT_BLUE      = "#005f86"
ribo_orange = rgb(228,88,10 , maxColorValue = 255)
rna_blue   = rgb(55,135,192, maxColorValue = 255)
color.palette0 = colorRampPalette(c("#98abc5", "#8a89a6", "#7b6888", "#6b486b", "#a05d56", "#d0743c", "#ff8c00"), space="Lab")
cb_friendly_palette <- brewer.pal(4, "Dark2") 

my_custom_theme <- function() {
  theme_cowplot() +
  theme(
   plot.subtitle = element_text(size = unit(8,'pt')),
    text = element_text(family = "Helvetica"),
     legend.title = element_text(size = unit(8,"pt")), 
    legend.text = element_text(size = unit(8,"pt")),
    axis.title = element_text(size = unit(8,"pt")),
    axis.text = element_text(size = unit(8,"pt")),
    axis.line = element_line(size = 1, color = "black"),
    axis.ticks = element_line(size = 1, color = "black"),
    axis.ticks.length = unit(5, "pt"),
    axis.title.x = element_text(margin = margin(t = 5, unit = "pt")),
    axis.title.y = element_text(margin = margin(r = 5, unit = "pt"))
  )
}


create_correlation_plot <- function(data) {
  ggplot(data, aes(Var2_cleaned, Var1_cleaned, fill = value)) +
    geom_tile(color = "white") +
    scale_fill_gradientn(colors = brewer.pal(n = 9, name = "Greens"), 
                         limits = c(0.5, 1)) +
    labs(x = "", y = "", fill = "Correlation") +
    theme_minimal() +
    theme(panel.grid.major = element_blank(),
          axis.text.x = element_text(size = 8, angle = 45, hjust = 1),
          axis.text.y = element_text(size = 8),
          plot.subtitle = element_text(size = 8),
          text = element_text(family = "Helvetica"),
          legend.title = element_text(size = 8), 
          legend.text = element_text(size = 8),
          legend.background = element_rect(fill = "white", color = NA),
          legend.box.background = element_rect(color = NA)) +
    coord_flip()
}
#####FILTER FUNCTION#######
# Define the function to filter and return the matrix with original transcript name column
filter_genes_by_cpm_with_transcripts <- function(count_matrix, min_cols, desired_cpm) {
  # Store the original name of the first column
  transcript_col_name <- colnames(count_matrix)[1]
  
  # Extract transcript names
  transcript_names <- count_matrix[, 1]
  
  # Remove transcript names from the count matrix for processing
  count_matrix_without_transcripts <- count_matrix[, -1]
  
  # Convert the adjusted count matrix to CPM
  cpm_matrix <- cpm(count_matrix_without_transcripts)
  
  # Identify genes that meet the criteria
  genes_meet_criteria <- apply(cpm_matrix, 1, function(row) {
    sum(row > desired_cpm) >= min_cols
  })
  
  # Filter the original count matrix and transcript names based on the criteria
  filtered_count_matrix <- count_matrix_without_transcripts[genes_meet_criteria, ]
  filtered_transcript_names <- transcript_names[genes_meet_criteria]
  
  # Combine the filtered transcript names with the filtered count matrix
  # Using the original column name for transcript names
  final_matrix <- cbind(TranscriptName = filtered_transcript_names, filtered_count_matrix)
  colnames(final_matrix)[1] <- transcript_col_name
  
  # Return the final matrix with transcript names and filtered counts
  return(final_matrix)
}


plot_pairwise_relationships <- function(counts_w, 
                                        id1, id2, 
                                        main = "",
                                        num_bin = 30, 
                                        xrange = 10000, 
                                        yrange = 10000) {
  
  sp <- ggplot(counts_w, aes_string(x = id1, y = id2)) +
    geom_jitter(size = 0.2, color = "gray", alpha = 0.3) +
    geom_hex(bins = num_bin, aes(alpha = log10(..count..)), fill = BURNT_ORANGE, show.legend = TRUE) +
    scale_x_continuous(
      labels = scales::trans_format("log10", scales::math_format(10^.x)),
      limits = c(3, xrange), 
      trans = "log10"
    ) +
    scale_y_continuous(
      labels = scales::trans_format("log10", scales::math_format(10^.x)),
      limits = c(3, yrange), 
      trans = "log10"
    ) +
    theme_bw() +
    stat_cor(method = "spearman", 
             aes(label = ..r.label..), 
             cor.coef.name = "rho", 
             digits = 2,
             size = 2) 
  
  return(sp)
}


# Function for pairwise correlation for all combinations without exporting


calculate_correlations <- function(counts_w) {
  columns <- colnames(counts_w)
  plot_list <- list()
  
  for (id1 in columns) {
    for (id2 in columns) {
      if (id1 != id2) {
        plot <- plot_pairwise_relationships(counts_w, id1, id2)
        plot_list[[paste0(id1, "_vs_", id2, "_correlation")]] <- plot
      }
    }
  }
  
  return(plot_list)
}

# making correlation matrix:
# Modified get_lower_tri function for lower triangle


get_lower_tri <- function(cormat) {
  cormat[upper.tri(cormat)] <- NA
  cormat <- as.data.frame(cormat)
  cormat$Var1 <- rownames(cormat)
  cormat <- tidyr::pivot_longer(cormat, -Var1, names_to = "Var2", values_to = "value")
  cormat <- cormat[!is.na(cormat$value),]
  return(cormat)
}
# Correlation plot function:
# Create plot function




  

calculate_reliability <- function(data, columns) {
  if (length(columns) < 2) {
    warning("Need at least 2 replicates to calculate reliability")
    return(NA)
  }
  
  # Convert to CPM
  cpm_data <- cpm(data[, columns, with = FALSE])
  
  correlations <- combn(ncol(cpm_data), 2, function(pair) {
    cor(cpm_data[, pair[1]], cpm_data[, pair[2]], method = "spearman", use = "pairwise.complete.obs")
  })
  
  return(mean(correlations))
}
plot_pairwise_relationships_reliability<- function(counts_w, 
                                        id1_columns, 
                                        id2_columns, 
                                        main = "",
                                        num_bin = 30,
                                        xrange = 10000,
                                        yrange = 10000) {
  # Create a copy of the data to avoid modifying the original
  data_copy <- data.table::copy(counts_w)
  
  # Function to calculate reliability using CPM values
  calculate_reliability <- function(data, columns) {
    if (length(columns) < 2) {
      warning("Need at least 2 replicates to calculate reliability")
      return(NA)
    }
    
    # Convert to CPM
    cpm_data <- cpm(data[, columns, with = FALSE])
    
    correlations <- combn(ncol(cpm_data), 2, function(pair) {
      cor(cpm_data[, pair[1]], cpm_data[, pair[2]], 
          method = "spearman", use = "pairwise.complete.obs")
    })
    
    return(mean(correlations))
  }
  
  # Convert to CPM and calculate means
  cpm_id1 <- cpm(data_copy[, id1_columns, with = FALSE])
  cpm_id2 <- cpm(data_copy[, id2_columns, with = FALSE])
  
  data_copy[, mean_id1_cpm := rowMeans(cpm_id1, na.rm = TRUE)]
  data_copy[, mean_id2_cpm := rowMeans(cpm_id2, na.rm = TRUE)]
  
  # Calculate correlations and reliabilities
  observed_cor <- cor(data_copy$mean_id1_cpm, data_copy$mean_id2_cpm, 
                      method = "spearman", use = "pairwise.complete.obs")
  reliability_id1 <- calculate_reliability(data_copy, id1_columns)
  reliability_id2 <- calculate_reliability(data_copy, id2_columns)
  
  # Calculate corrected correlation
  corrected_cor <- observed_cor / sqrt(reliability_id1 * reliability_id2)
  corrected_cor <- min(corrected_cor, 1)  # Ensure corrected correlation doesn't exceed 1
  
  # Create annotation data frame with even spacing in log scale
  log_yrange <- log10(yrange)
  log_ymin <- log10(2)  # Assuming 2 is the minimum y value
  y_positions <- 10^seq(log_yrange, log_yrange - 0.5, length.out = 4)
  
  annotation_df <- data.frame(
    x = 10, #rep(10, 4)  # Repeat x value for each line
    y = yrange,#y_positions,
    label = c(
      #sprintf("rho[obs] == %.2f", observed_cor),
      sprintf("rho[cor] == %.2f", corrected_cor)
      #sprintf("r[Ribo] == %.2f", reliability_id2),
      #sprintf("r[RNA] == %.2f", reliability_id1)
    )
  )
  
  # Create the plot
  sp <- ggplot(data_copy, aes(x = mean_id1_cpm, y = mean_id2_cpm)) +
    geom_jitter(size = 0.2, color = "gray", alpha = 0.3) +
    geom_hex(bins = num_bin, aes(alpha = log10(..count..)), fill = BURNT_ORANGE, show.legend = TRUE) +
    scale_x_continuous(
      labels = scales::trans_format("log10", scales::math_format(10^.x)),
      limits = c(5, xrange),  # Changed lower limit to 5 for log scale
      trans = "log10"
    ) +
    scale_y_continuous(
      labels = scales::trans_format("log10", scales::math_format(10^.x)),
      limits = c(2, yrange),  # Changed lower limit to 2 for log scale
      trans = "log10"
    ) +
    my_custom_theme() +
    geom_text(data = annotation_df, aes(x = x, y = y, label = label),
              parse = TRUE, hjust = 0, vjust = 1, size = 3) +
    labs(subtitle = main,
         x = paste(id1_columns[1], "(mean CPM)"),
         y = paste(id2_columns[1], "(mean CPM)"))+
    theme(plot.subtitle  = element_text(hjust = 0.5))
  
  return(sp)
}

create_MD_plot <- function(contrast, genes_to_label = c()) {
  top <- topTags(contrast, n = Inf)
  output <- as.data.table(top$table)
  # Identify all significant changes
  significant_changes <- output %>% 
    filter(FDR < 0.2) %>% 
    filter(logFC > 1 | logFC < -1)
  # Identify genes to label
  genes_to_label_data <- significant_changes %>%
    filter(gene_name %in% genes_to_label)
  
  plot_MD <- ggplot(output, aes(x = logCPM, y = logFC)) +
    # Continuous density representation with fixed limits
    stat_density_2d(aes(fill = after_stat(density)), geom = "tile", contour = FALSE) +
scale_fill_gradientn(colors = c("white", "#e6f3f8", "#005f86"),
                     values = c(0, 0.03, 1),  # positions of colors in the scale
                     name = "Density",
                     limits = c(0, 0.35))+
    # Plot all significant changes in #bf5700 color
    geom_point(data = significant_changes, aes(x = logCPM, y = logFC), 
               alpha = 1, size = 0.5, color = "#bf5700") +
    # Label only the specified genes
    geom_text_repel(data = genes_to_label_data, aes(label = as.character(gene_name)),
                    size = unit(3, 'pt'), color = "black", max.overlaps = Inf) +
    labs(x = "log2(CPM)", y = "log2(FC)") +
    xlim(3.5, 13) +
    geom_hline(yintercept = 1, linetype = "dashed", color = "red") +
    geom_hline(yintercept = -1, linetype = "dashed", color = "red") +
    scale_y_continuous(limits = c(-10, 10), n.breaks = 10) +
    theme_cowplot() +
    theme(axis.line = element_line(size = 1),
          axis.title.x = element_text(size = 8),
          axis.title.y = element_text(size = 8),
          axis.text.x = element_text(size = 8),
          axis.text.y = element_text(size = 8),
          legend.text = element_text(size = 8,angle = 45, hjust = 1),
          legend.title = element_text(size = 8),
        legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "horizontal"
          )
  
  return(plot_MD)
}



go_enrichment_pipeline <- function(enrichment_results, simplify_cutoff, min_go_level, max_gene_count, plot_by = "GeneRatio") {
  
  # Ensure plot_by is either "GeneRatio" or "Count"
  plot_by <- match.arg(plot_by, c("GeneRatio", "Count"))
  
  # Function to convert gene_ratio to numeric
  convert_gene_ratio <- function(gene_ratio) {
    ratio <- strsplit(gene_ratio, "/")
    return(as.numeric(sapply(ratio, function(x) as.numeric(x[1])/as.numeric(x[2]))))
  }
  
  # Step 1: Simplify the results
  simplified_results <- simplify(enrichment_results, 
                                 cutoff = simplify_cutoff,
                                 by = "GeneRatio",
                                 select_fun = min)
  
  # Step 2: Get GO term levels
  get_go_level <- function(go_id) {
    all_parents <- c(as.list(GOBPPARENTS), as.list(GOMFPARENTS), as.list(GOCCPARENTS))
    
    if (go_id %in% names(all_parents)) {
      level <- 0
      current_terms <- go_id
      while (length(current_terms) > 0) {
        level <- level + 1
        parents <- unique(unlist(all_parents[current_terms]))
        current_terms <- parents[!is.na(parents)]
        if (length(current_terms) == 0 || "all" %in% current_terms) {
          break
        }
      }
      return(level)
    } else {
      return(NA)
    }
  }
  
  # Step 3: Filter for specific terms and convert GeneRatio to numeric
  filtered_results <- as.data.frame(simplified_results@compareClusterResult) %>%
    mutate(GO_level = sapply(ID, get_go_level),
           GeneRatio = convert_gene_ratio(GeneRatio)) %>%
    filter(GO_level >= min_go_level,   # Keep terms at least as specific as min_go_level
           Count <= max_gene_count)    # Keep terms associated with fewer genes
  
  # Step 4: Create a new compareClusterResult object
  final_results <- new("compareClusterResult",
                       compareClusterResult = filtered_results,
                       geneClusters = enrichment_results@geneClusters[unique(filtered_results$Cluster)],
                       .call = enrichment_results@.call)
  
  # Function to truncate long labels
  truncate_label <- function(label, max_chars = 50) {
    if (nchar(label) > max_chars) {
      return(paste0(str_trunc(label, max_chars - 3), "..."))
    }
    return(label)
  }
  
  # Step 5: Create the dotplot
  dot_plot <- dotplot(final_results, showCategory = 15, 
                      x = "Cluster",
                      color = "p.adjust",
                      size = plot_by,
                      font.size = 8
                      ) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
    theme(
      panel.grid.major = element_line(color = "grey90", linetype = "dashed"),
      panel.grid.minor = element_line(color = "grey95", linetype = "dotted")
    ) +
    scale_y_discrete(labels = function(x) sapply(x, truncate_label))
  
if (plot_by == "GeneRatio") {
    dot_plot <- dot_plot + 
      scale_size_continuous(
        name = "GeneRatio",
        breaks = c(0.025, 0.05, 0.075, 0.1)
      )
  } else {
    dot_plot <- dot_plot + 
      guides(size = guide_legend(title = plot_by))
  } 
  
  # Add a proper legend title for the size aesthetic
  dot_plot <- dot_plot + 
    guides(size = guide_legend(title = plot_by))
  
  # Return both the final results and the plot
  return(list(results = final_results, plot = dot_plot))
}

truncate_label <- function(label, max_chars = 50) {
  if (nchar(label) > max_chars) {
    return(paste0(str_trunc(label, max_chars - 3), "..."))
  }
  return(label)
}

# Robust CLR function
robust_clr_transform <- function(x, pseudo_count = 1) {
  # Add pseudo-count to handle zeros
  x_adjusted <- x + pseudo_count
  
  # Calculate geometric mean
  geo_mean <- exp(mean(log(x_adjusted)))
  
  # Calculate CLR
  log(x_adjusted / geo_mean)
}

# Function to apply CLR to a data frame
apply_robust_clr <- function(df, pseudo_count = 1) {
  # Assuming the first column is gene names
  genes <- df[, 1]
  
  # Apply CLR to each column
  clr_data <- apply(df[, -1], 2, robust_clr_transform, pseudo_count = pseudo_count)
  
  # Add gene names back
  clr_data <- cbind(genes, as.data.frame(clr_data))
  
  return(clr_data)
}
```

# Datasets used in analysis

```{r}
ITP.ribo <- Ribo("./input_data/ITP.ribo")

RNASEQ.ribo <- Ribo("./input_data/RNASEQ.ribo")

# importing OMA-1 pulldown dataset from Spike et al 2014
spike_et_al_2014_1290 <- readxl::read_xlsx("./input_data/genetics.114.168823-7.xls", sheet = 5)
# Remove rows with any NA values
spike_et_al_2014_1290_clean <- unique(na.omit(spike_et_al_2014_1290 ))
oma_bound_list <- spike_et_al_2014_1290_clean$Ensembl

ensembl <- useMart("ensembl", dataset = "celegans_gene_ensembl")
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", 
                   host = "https://nov2020.archive.ensembl.org", 
                   dataset = "celegans_gene_ensembl")
att <- listAttributes(ensembl)
results <- getBM(attributes = c('external_gene_name','wormbase_transcript'), 
                 mart = ensembl)
results <- results |> mutate(wormbase_transcript =  gsub("([a-zA-Z]?\\.\\d)$", "", wormbase_transcript))

oma <- results |> dplyr::filter(wormbase_transcript %in% oma_bound_list)

oma <- as.data.table(unique(oma))
oma <- oma[,1] 
colnames(oma) <- c("gene_name")
```

# QC and pre-processing

## Quality Control

We use four metrics to do quality control on our sampples

-   CDS Percentage

-   Stop and start site metagene plot

-   Presence of 30nt peak

Most of the QC analysis uses the riboR library and its functions to work with .Ribo files. To know more about .Ribo files please look at the RiboFlow platform (Ozadam et al 2020)

### CDS percentage

```{r}


one_cell_B7_1 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 26,
                                                range.upper = 40,
                                                experiment = c('WT_1-cell_1'),
                                                length      = TRUE,
                                                transcript  = TRUE,
                                                tidy = T
                                                ))

one_cell_B10_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 25,
                                                   range.upper = 39,
                                                   experiment = c('WT_1-cell_2'),
                                                   length = TRUE,
                                                   transcript  = TRUE,
                                                   tidy = T))

two_cell_B1_1 <- as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 26,
                                                 range.upper = 40,
                                                 experiment = c('WT_2-cell_1'),
                                                 length      = TRUE,
                                                 transcript  = TRUE,
                                                 tidy = T ))

two_cell_B2_2 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 25,
                                                 range.upper = 40,
                                                 experiment = c('WT_2-cell_2'),
                                                 length      = TRUE,
                                                 transcript  = TRUE,
                                                 tidy = T ))

two_cell_B3_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 25,
                                                range.upper = 39,
                                                experiment = c('WT_2-cell_3'),
                                                length      = TRUE,
                                                transcript  = TRUE,
                                                tidy = T ))

two_cell_B7_4 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 22,
                                                range.upper = 40,
                                                experiment = c('WT_2-cell_4'),
                                                length      = TRUE,
                                                transcript  = TRUE,
                                                tidy = T))

four_cell_B2_1 <- as.data.table(get_region_counts(ITP.ribo,
                                                  range.lower = 23,
                                                  range.upper = 40,
                                                  experiment = c('WT_4-cell_1'),
                                                  length      = TRUE,
                                                  transcript  = TRUE,
                                                  tidy = T ))

four_cell_B3_2 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 24,
                                                 range.upper = 38,
                                                 experiment = c('WT_4-cell_2'),
                                                 length      = TRUE,
                                                 transcript  = TRUE,
                                                 tidy = T ))

four_cell_B3_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 22,
                                                 range.upper = 38,
                                                 experiment = c('WT_4-cell_3'),
                                                 length      = TRUE,
                                                 transcript  = TRUE,
                                                 tidy = T ))

four_cell_B7_4 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 23,
                                                 range.upper = 40,
                                                 experiment = c('WT_4-cell_4'),
                                                 length      = TRUE,
                                                 transcript  = TRUE,
                                                 tidy = T))

eight_cell_B3_1 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 22,
                                                   range.upper = 40,
                                                   experiment = c('WT_8-cell_1'),
                                                   length      = TRUE,
                                                   transcript  = TRUE,
                                                   tidy = T))

eight_cell_B7_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 24,
                                                   range.upper = 40,
                                                   experiment = c('WT_8-cell_2'),
                                                   length      = TRUE,
                                                   transcript  = TRUE,
                                                   tidy = T))

eight_cell_B8_3 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 22,
                                                   range.upper = 40,
                                                   experiment = c("WT_8-cell_3"),
                                                   length      = TRUE,
                                                   transcript  = TRUE,
                                                   tidy = T))

eight_cell_B9_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 23,
                                                   range.upper = 40,
                                                   experiment = c("WT_8-cell_4"),
                                                   length      = TRUE,
                                                   transcript  = TRUE,
                                                   tidy = T))

eight_cell_B10_5 <- as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 23,
                                                    range.upper = 40,
                                                    experiment = c("WT_8-cell_5"),
                                                    length      = TRUE,
                                                    transcript  = TRUE,
                                                    tidy = T))

oma_1_1cell_B6_1 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 23,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_1-cell_1'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T ))

oma_1_1cell_B10_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 25,
                                                     range.upper = 40,
                                                     experiment = c("OMA-1_1-cell_2"),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T))

oma_1_1cell_B10_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 24,
                                                    range.upper = 40,
                                                    experiment = c("OMA-1_1-cell_3"),
                                                    length      = TRUE,
                                                    transcript  = TRUE,
                                                    tidy = T))

oma_1_2cell_B4_1 <-  as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 26,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_2-cell_1'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T ))

oma_1_2cell_B5_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 24,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_2-cell_2'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T))

oma_1_2cell_B6_3 <-  as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 29,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_2-cell_3'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T))

oma_1_2cell_B10_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 25,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_2-cell_4'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T ))

oma_1_2cell_B8_5 <- as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 23,
                                                    range.upper = 40,
                                                    experiment = c('OMA-1_2-cell_5'),
                                                    length      = TRUE,
                                                    transcript  = TRUE,
                                                    tidy = T ))

oma_1_2cell_B9_6 <-as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 24,
                                                   range.upper = 40,
                                                   experiment = c('OMA-1_2-cell_6'),
                                                   length      = TRUE,
                                                   transcript  = TRUE,
                                                   tidy = T ))

oma_1_4cell_B4_1 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 27,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_4-cell_1'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T ))

oma_1_4cell_B5_2 <-  as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 26,
                                                     range.upper = 39,
                                                     experiment = c('OMA-1_4-cell_2'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T))

oma_1_4cell_B6_3 <-  as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 25,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_4-cell_3'),
                                                     length      = TRUE,
                                                     transcript  = TRUE,
                                                     tidy = T))

oma_1_4cell_B9_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 25,
                                                    range.upper = 40,
                                                    experiment = c('OMA-1_4-cell_4'),
                                                    length      = TRUE,
                                                    transcript  = TRUE,
                                                    tidy = T))

list_of_datasets <- list(one_cell_B7_1,
                         one_cell_B10_2,
                         two_cell_B1_1,
                         two_cell_B2_2 ,
                         two_cell_B3_3,
                         two_cell_B7_4,
                         four_cell_B2_1,
                         four_cell_B3_2,
                         four_cell_B3_3,
                         four_cell_B7_4 ,
                         eight_cell_B3_1,
                         eight_cell_B7_2,
                         eight_cell_B8_3 ,
                         eight_cell_B9_4,
                         eight_cell_B10_5,
                         oma_1_1cell_B6_1,
                         oma_1_1cell_B10_2,
                         oma_1_1cell_B10_3,
                         oma_1_2cell_B4_1 ,
                         oma_1_2cell_B5_2,
                         oma_1_2cell_B6_3 ,
                         oma_1_2cell_B10_4,
                         oma_1_2cell_B8_5 ,
                         oma_1_2cell_B9_6,
                         oma_1_4cell_B4_1,
                         oma_1_4cell_B5_2,
                         oma_1_4cell_B6_3 ,
                         oma_1_4cell_B9_4 
                       )



combined <- data.table()

for (dataset in list_of_datasets){
  
  combined <- rbind(combined,dataset)
}

rcw_ribo <- dcast(combined,region ~ experiment )
combined <-melt(rcw_ribo, id.vars = "region", variable.name = "experiment", value.name = "count")
rcw_ribo <- dcast(combined, experiment~region  )

# We incorporated UTRJ into UTR counts
rcw_ribo <- rcw_ribo |> mutate(UTR3 = UTR3 + UTR3J) |> mutate(UTR5 = UTR5 + UTR5J) |> dplyr::select(!c(UTR3J,UTR5J))
combined <-melt(rcw_ribo, id.vars = "experiment", variable.name ="region" , value.name = "count")
```

```{r}
df <- combined %>%
  mutate(replicate_number = as.integer(str_extract(experiment, "\\d+$")))

# Remove the replicate number and preceding underscore from the 'experiment' column
df$experiment <- str_replace(df$experiment, "_\\d+$", "")
df <- df %>%
  mutate(condition = str_extract(experiment, "WT|OMA"),
         # Remove 'WT' or 'OMA' from the 'experiment' column
         experiment = str_replace(experiment, "WT_|OMA-1_", ""))

region_counts <- df 

summary_df <- region_counts %>%
  group_by(experiment,condition, replicate_number) %>%
  summarise(sum_count = sum(count, na.rm = TRUE), .groups = 'drop')

region_counts <- region_counts %>%
  left_join(summary_df, by = c("experiment", "condition","replicate_number"))

region_counts_percent <- region_counts |> 
  mutate(percent_coverage = (count/sum_count)*100) 
region_counts_percent_mean <- region_counts_percent 

region_counts_percent_mean$experiment <- factor(region_counts_percent_mean$experiment, levels = c("1-cell", "2-cell","4-cell","8-cell"))

region_counts_percent_mean$condition <- factor(region_counts_percent_mean$condition, levels = c("WT", "OMA"))

region_counts_percent_mean$region<- factor(region_counts_percent_mean$region, levels = c("UTR5", "CDS","UTR3"))

region_counts_percent_mean_WT <- region_counts_percent_mean |> 
  filter(condition == "WT")
region_counts_percent_mean_WT$region <- factor(region_counts_percent_mean_WT$region,
                                               levels = c("UTR5", "CDS", "UTR3"),
                                               labels = c("5' UTR", "CDS", "3' UTR"))
region_counts_percent_mean_OMA <- region_counts_percent_mean |> 
  filter(condition == "OMA")
region_counts_percent_mean_OMA$region <- factor(region_counts_percent_mean_OMA$region,
                                               levels = c("UTR5", "CDS", "UTR3"),
                                               labels = c("5' UTR", "CDS", "3' UTR"))

region_counts_percent_mean_OMA_plot <- ggbarplot(region_counts_percent_mean_OMA, 
                                                 x = 'experiment', 
                                                 y = 'percent_coverage', 
                                                 fill = 'region', 
                                                 color = 'region',
                                                 position = position_dodge(0.9), 
                                                 add = "mean_sd",
                                                 add.params = list(color = "black"),
                                                 ylab = "Reads mapped (%)", 
                                                 xlab = "") +
  my_custom_theme() +
  theme(
    legend.position = "top",
    legend.justification = "center"
  ) +
  labs(fill = "Region", color = "Region")  # This replaces the ggpar() call


 
 region_counts_percent_mean_WT_plot  <- ggbarplot(region_counts_percent_mean_WT, 
                                                 x = 'experiment', 
                                                 y = 'percent_coverage', 
                                                 fill = 'region', 
                                                 color = 'region',
                                                 position = position_dodge(0.9), 
                                                 add = "mean_sd",
                                                 add.params = list(color = "black"),
                                                 ylab = "Reads mapped (%)", 
                                                 xlab = "") +
  my_custom_theme() +
  theme(
    legend.position = "top",
    legend.justification = "center"
  ) +
  labs(fill = "Region", color = "Region")  # This replaces the ggpar() call

```

### Start and stop site coverage

#### Start site

```{r}

one_cell_B7_1 <- get_tidy_metagene(ITP.ribo,
                                   site = 'start',
                                   range.lower = 26,
                                   range.upper = 40,
                                   experiment = c('WT_1-cell_1'),
                                   length = TRUE)

one_cell_B10_2 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 25,
                                    range.upper = 39,
                                    experiment = c('WT_1-cell_2'),
                                    length = TRUE,
                                    site = 'start')

two_cell_B1_1 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 26,
                                   range.upper = 40,
                                   experiment = c('WT_2-cell_1'),
                                   length = TRUE,
                                   site = 'start')

two_cell_B2_2 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 25,
                                   range.upper = 40,
                                   experiment = c('WT_2-cell_2'),
                                   length = TRUE,
                                   site = 'start')

two_cell_B3_3 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 25,
                                   range.upper = 39,
                                   experiment = c('WT_2-cell_3'),
                                   length = TRUE,
                                   site = 'start')

two_cell_B7_4 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 22,
                                   range.upper = 40,
                                   experiment = c('WT_2-cell_4'),
                                   length = TRUE,
                                   site = 'start')

four_cell_B2_1 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 23,
                                    range.upper = 40,
                                    experiment = c('WT_4-cell_1'),
                                    length = TRUE,
                                    site = 'start')

four_cell_B3_2 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 24,
                                    range.upper = 38,
                                    experiment = c('WT_4-cell_2'),
                                    length = TRUE,
                                    site = 'start')

four_cell_B3_3 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 22,
                                    range.upper = 38,
                                    experiment = c('WT_4-cell_3'),
                                    length = TRUE,
                                    site = 'start')

four_cell_B7_4 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 23,
                                    range.upper = 40,
                                    experiment = c('WT_4-cell_4'),
                                    length = TRUE,
                                    site = 'start')

eight_cell_B3_1 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 22,
                                     range.upper = 40,
                                     experiment = c('WT_8-cell_1'),
                                     length = TRUE,
                                     site = 'start')

eight_cell_B7_2 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 24,
                                     range.upper = 40,
                                     experiment = c('WT_8-cell_2'),
                                     length = TRUE,
                                     site = 'start')

eight_cell_B8_3 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 22,
                                     range.upper = 40,
                                     experiment = c("WT_8-cell_3"),
                                     length = TRUE,
                                     site = 'start')

eight_cell_B9_4 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 23,
                                     range.upper = 40,
                                     experiment = c("WT_8-cell_4"),
                                     length = TRUE,
                                     site = 'start')

eight_cell_B10_5 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 23,
                                      range.upper = 40,
                                      experiment = c("WT_8-cell_5"),
                                      length = TRUE,
                                      site = 'start')

oma_1_1cell_B6_1 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 23,
                                      range.upper = 40,
                                      experiment = c('OMA-1_1-cell_1'),
                                      site = 'start')

oma_1_1cell_B10_2 <- get_tidy_metagene(ITP.ribo,
                                       range.lower = 25,
                                       range.upper = 40,
                                       experiment = c("OMA-1_1-cell_2"),
                                       length = TRUE,
                                       site = 'start')

oma_1_1cell_B10_3 <- get_tidy_metagene(ITP.ribo,
                                       range.lower = 24,
                                       range.upper = 40,
                                       experiment = c("OMA-1_1-cell_3"),
                                       length = TRUE,
                                       site = 'start')

oma_1_2cell_B4_1 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 26,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_1'),
                                      length = TRUE,
                                      site = 'start')

oma_1_2cell_B5_2 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 24,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_2'),
                                      length = TRUE,
                                      site = 'start')

oma_1_2cell_B6_3 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 29,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_3'),
                                      length = TRUE,
                                      site = 'start')

oma_1_2cell_B10_4 <- get_tidy_metagene(ITP.ribo,
                                       range.lower = 25,
                                       range.upper = 40,
                                       experiment = c('OMA-1_2-cell_4'),
                                       length = TRUE,
                                       site = 'start')

oma_1_2cell_B8_5 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 23,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_5'),
                                      length = TRUE,
                                      site = 'start')

oma_1_2cell_B9_6 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 24,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_6'),
                                      length = TRUE,
                                      site = 'start')

oma_1_4cell_B4_1 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 27,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_1'),
                                      length = TRUE,
                                      site = 'start')

oma_1_4cell_B5_2 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 26,
                                      range.upper = 39,
                                      experiment = c('OMA-1_4-cell_2'),
                                      length = TRUE,
                                      site = 'start')

oma_1_4cell_B6_3 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 25,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_3'),
                                      length = TRUE,
                                      site = 'start')

oma_1_4cell_B9_4 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 25,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_4'),
                                      length = TRUE,
                                      site = 'start')

```

```{r}
list_of_datasets <- list(
  one_cell_B7_1 = one_cell_B7_1,
  one_cell_B10_2 = one_cell_B10_2,
  two_cell_B1_1 = two_cell_B1_1,
  two_cell_B2_2 = two_cell_B2_2,
  two_cell_B3_3 = two_cell_B3_3,
  two_cell_B7_4 = two_cell_B7_4,
  four_cell_B2_1 = four_cell_B2_1,
  four_cell_B3_2 = four_cell_B3_2,
  four_cell_B3_3 = four_cell_B3_3,
  four_cell_B7_4 = four_cell_B7_4,
  eight_cell_B3_1 = eight_cell_B3_1,
  eight_cell_B7_2 = eight_cell_B7_2,
  eight_cell_B8_3 = eight_cell_B8_3,
  eight_cell_B9_4 = eight_cell_B9_4,
  eight_cell_B10_5 = eight_cell_B10_5,
  oma_1_1cell_B6_1 = oma_1_1cell_B6_1,
  oma_1_1cell_B10_2 = oma_1_1cell_B10_2,
  oma_1_1cell_B10_3 = oma_1_1cell_B10_3,
  oma_1_2cell_B4_1 = oma_1_2cell_B4_1,
  oma_1_2cell_B5_2 = oma_1_2cell_B5_2,
  oma_1_2cell_B6_3 = oma_1_2cell_B6_3,
  oma_1_2cell_B10_4 = oma_1_2cell_B10_4,
  oma_1_2cell_B8_5 = oma_1_2cell_B8_5,
  oma_1_2cell_B9_6 = oma_1_2cell_B9_6,
  oma_1_4cell_B4_1 = oma_1_4cell_B4_1,
  oma_1_4cell_B5_2 = oma_1_4cell_B5_2,
  oma_1_4cell_B6_3 = oma_1_4cell_B6_3,
  oma_1_4cell_B9_4 = oma_1_4cell_B9_4
)


convert_to_tibble_and_normalize <- function(df, df_name) {
  metadata <- as.data.frame(metadata(df)[[1]])
  
  # Use the dataframe name as the experiment name
  current_experiment <- df_name
  
  # Get the total reads for the current experiment
  total_reads <- metadata$total.reads[metadata$experiment == as.character(df$experiment[1])]
  
  result <- tibble(
    experiment = current_experiment,
    position = as.integer(df$position),
    count = as.numeric(df$count),
    total_reads = total_reads,
    cpm = (count / total_reads) * 1e6
  )
  
  # Add metadata columns
  for(col in names(metadata)) {
    if(col != "experiment") {
      result[[col]] <- metadata[[col]][metadata$experiment == as.character(df$experiment[1])]
    }
  }
  
  return(result)
}

# Now apply this function to all datasets and combine them
combined_normalized <- list_of_datasets %>%
  imap_dfr(~convert_to_tibble_and_normalize(.x, .y), .id = "source")

combined_normalized_simple <- combined_normalized |> 
  dplyr::select(experiment,position,cpm)

combined_tbl<- as.data.table(combined_normalized_simple
                             )
rcw_ribo <- dcast(combined_tbl ,  position~ experiment)
setcolorder(rcw_ribo,c("position",
                       "one_cell_B7_1" ,
  "one_cell_B10_2" ,
  "two_cell_B1_1",
  "two_cell_B2_2",
  "two_cell_B3_3" ,
  "two_cell_B7_4" ,
  "four_cell_B2_1",
  "four_cell_B3_2" ,
  "four_cell_B3_3" ,
  "four_cell_B7_4" ,
  "eight_cell_B3_1",
  "eight_cell_B7_2" ,
  "eight_cell_B8_3" ,
  "eight_cell_B9_4" ,
  "eight_cell_B10_5" ,
  "oma_1_1cell_B6_1" ,
  "oma_1_1cell_B10_2" ,
  "oma_1_1cell_B10_3" ,
  "oma_1_2cell_B4_1",
  "oma_1_2cell_B5_2" ,
  "oma_1_2cell_B6_3" ,
  "oma_1_2cell_B10_4" ,
  "oma_1_2cell_B8_5" ,
  "oma_1_2cell_B9_6",
  "oma_1_4cell_B4_1",
  "oma_1_4cell_B5_2",
  "oma_1_4cell_B6_3",
  "oma_1_4cell_B9_4"))

colnames(rcw_ribo) <- c( "position", 
                         "WT_1-cell_1",
                         "WT_1-cell_2",
                         "WT_2-cell_1",
                         "WT_2-cell_2" ,
                         "WT_2-cell_3",
                         "WT_2-cell_4",
                         "WT_4-cell_1",
                         "WT_4-cell_2",
                         "WT_4-cell_3",
                         "WT_4-cell_4" ,
                         "WT_8-cell_1",
                         "WT_8-cell_2",
                         "WT_8-cell_3" ,
                         "WT_8-cell_4",
                         "WT_8-cell_5",
                         "OMA-1_1-cell_1",
                         "OMA-1_1-cell_2",
                         "OMA-1_1-cell_3",
                         "OMA-1_2-cell_1" ,
                         "OMA-1_2-cell_2",
                         "OMA-1_2-cell_3" ,
                         "OMA-1_2-cell_4",
                         "OMA-1_2-cell_5" ,
                         "OMA-1_2-cell_6" ,
                         "OMA-1_4-cell_1",
                         "OMA-1_4-cell_2",
                         "OMA-1_4-cell_3" ,
                         "OMA-1_4-cell_4" 
                         ) 

combined <- melt(rcw_ribo, id.vars = "position" , variable.name ="experiment", value.name = "count", na.rm = TRUE) 

df <- combined %>%
  mutate(condition = str_extract(experiment, "WT|OMA"),
         # Remove 'WT' or 'OMA' from the 'experiment' column
         experiment = str_replace(experiment, "WT_|OMA-1_", ""))

wt_df <- df |> filter(condition %in% "WT") |> dplyr::select(-condition) |> relocate(experiment,position) |> mutate(position_a_site = position +15)

#We just use the first replicate as an example. Other replicates look the same
wt_df_start_ex <- wt_df |> filter(experiment %in% c("1-cell_1","2-cell_1","4-cell_1", "8-cell_1"))


start_site_wt <-ggplot(wt_df_start_ex, aes(x = position_a_site, y = count, color = experiment)) + 
  geom_line() + 
  scale_y_continuous(limits = c(0,1500))+ scale_x_continuous(
    limits = c(-35, 35),
    breaks = seq(-30, 30, by = 5),  # Set custom breaks
    expand = c(0, 0)) + 
  xlab("Position")+ylab("Counts per million (CPM)")+
  scale_x_continuous(
    limits = c(-30, 30),
    breaks = seq(-30, 30, by = 15),  # Set custom breaks
    expand = c(0, 0)
  )+  scale_color_manual(values = cb_friendly_palette)+
  my_custom_theme() 



OMA_df <- df |> filter(condition %in% "OMA") |> dplyr::select(-condition) |> relocate(experiment,position) |> mutate(position_a_site = position +15)

#We just use the first replicate as an example. Other replicates look the same
OMA_df_start_ex <- OMA_df |> filter(experiment %in% c("1-cell_1","2-cell_1","4-cell_1"))


start_site_OMA <-ggplot(OMA_df_start_ex, aes(x = position_a_site, y = count, color = experiment)) + 
  geom_line() + 
  scale_y_continuous(limits = c(0,1300))+ scale_x_continuous(
    limits = c(-35, 35),
    breaks = seq(-30, 30, by = 5),  # Set custom breaks
    expand = c(0, 0)) + 
  scale_x_continuous(
    limits = c(-30, 30),
    breaks = seq(-30, 30, by = 15),  # Set custom breaks
    expand = c(0, 0)
  )+
  xlab("Position")+ylab("Counts per million (CPM)")+
  scale_color_manual(values = cb_friendly_palette)+
  my_custom_theme()

```

#### Stop site

```{r}
one_cell_B7_1 <- get_tidy_metagene(ITP.ribo,
                                   site = 'stop',
                                   range.lower = 26,
                                   range.upper = 40,
                                   experiment = c('WT_1-cell_1'),
                                   length = TRUE)

one_cell_B10_2 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 25,
                                    range.upper = 39,
                                    experiment = c('WT_1-cell_2'),
                                    length = TRUE,
                                    site = 'stop')

two_cell_B1_1 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 26,
                                   range.upper = 40,
                                   experiment = c('WT_2-cell_1'),
                                   length = TRUE,
                                   site = 'stop')

two_cell_B2_2 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 25,
                                   range.upper = 40,
                                   experiment = c('WT_2-cell_2'),
                                   length = TRUE,
                                   site = 'stop')

two_cell_B3_3 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 25,
                                   range.upper = 39,
                                   experiment = c('WT_2-cell_3'),
                                   length = TRUE,
                                   site = 'stop')

two_cell_B7_4 <- get_tidy_metagene(ITP.ribo,
                                   range.lower = 22,
                                   range.upper = 40,
                                   experiment = c('WT_2-cell_4'),
                                   length = TRUE,
                                   site = 'stop')

four_cell_B2_1 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 23,
                                    range.upper = 40,
                                    experiment = c('WT_4-cell_1'),
                                    length = TRUE,
                                    site = 'stop')

four_cell_B3_2 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 24,
                                    range.upper = 38,
                                    experiment = c('WT_4-cell_2'),
                                    length = TRUE,
                                    site = 'stop')

four_cell_B3_3 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 22,
                                    range.upper = 38,
                                    experiment = c('WT_4-cell_3'),
                                    length = TRUE,
                                    site = 'stop')

four_cell_B7_4 <- get_tidy_metagene(ITP.ribo,
                                    range.lower = 23,
                                    range.upper = 40,
                                    experiment = c('WT_4-cell_4'),
                                    length = TRUE,
                                    site = 'stop')

eight_cell_B3_1 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 22,
                                     range.upper = 40,
                                     experiment = c('WT_8-cell_1'),
                                     length = TRUE,
                                     site = 'stop')

eight_cell_B7_2 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 24,
                                     range.upper = 40,
                                     experiment = c('WT_8-cell_2'),
                                     length = TRUE,
                                     site = 'stop')

eight_cell_B8_3 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 22,
                                     range.upper = 40,
                                     experiment = c("WT_8-cell_3"),
                                     length = TRUE,
                                     site = 'stop')

eight_cell_B9_4 <- get_tidy_metagene(ITP.ribo,
                                     range.lower = 23,
                                     range.upper = 40,
                                     experiment = c("WT_8-cell_4"),
                                     length = TRUE,
                                     site = 'stop')

eight_cell_B10_5 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 23,
                                      range.upper = 40,
                                      experiment = c("WT_8-cell_5"),
                                      length = TRUE,
                                      site = 'stop')

oma_1_1cell_B6_1 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 23,
                                      range.upper = 40,
                                      experiment = c('OMA-1_1-cell_1'),
                                      site = 'stop')

oma_1_1cell_B10_2 <- get_tidy_metagene(ITP.ribo,
                                       range.lower = 25,
                                       range.upper = 40,
                                       experiment = c("OMA-1_1-cell_2"),
                                       length = TRUE,
                                       site = 'stop')

oma_1_1cell_B10_3 <- get_tidy_metagene(ITP.ribo,
                                       range.lower = 24,
                                       range.upper = 40,
                                       experiment = c("OMA-1_1-cell_3"),
                                       length = TRUE,
                                       site = 'stop')

oma_1_2cell_B4_1 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 26,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_1'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_2cell_B5_2 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 24,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_2'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_2cell_B6_3 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 29,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_3'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_2cell_B10_4 <- get_tidy_metagene(ITP.ribo,
                                       range.lower = 25,
                                       range.upper = 40,
                                       experiment = c('OMA-1_2-cell_4'),
                                       length = TRUE,
                                       site = 'stop')

oma_1_2cell_B8_5 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 23,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_5'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_2cell_B9_6 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 24,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_6'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_4cell_B4_1 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 27,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_1'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_4cell_B5_2 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 26,
                                      range.upper = 39,
                                      experiment = c('OMA-1_4-cell_2'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_4cell_B6_3 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 25,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_3'),
                                      length = TRUE,
                                      site = 'stop')

oma_1_4cell_B9_4 <- get_tidy_metagene(ITP.ribo,
                                      range.lower = 25,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_4'),
                                      length = TRUE,
                                      site = 'stop')
```

```{r}
list_of_datasets <- list(
  one_cell_B7_1 = one_cell_B7_1,
  one_cell_B10_2 = one_cell_B10_2,
  two_cell_B1_1 = two_cell_B1_1,
  two_cell_B2_2 = two_cell_B2_2,
  two_cell_B3_3 = two_cell_B3_3,
  two_cell_B7_4 = two_cell_B7_4,
  four_cell_B2_1 = four_cell_B2_1,
  four_cell_B3_2 = four_cell_B3_2,
  four_cell_B3_3 = four_cell_B3_3,
  four_cell_B7_4 = four_cell_B7_4,
  eight_cell_B3_1 = eight_cell_B3_1,
  eight_cell_B7_2 = eight_cell_B7_2,
  eight_cell_B8_3 = eight_cell_B8_3,
  eight_cell_B9_4 = eight_cell_B9_4,
  eight_cell_B10_5 = eight_cell_B10_5,
  oma_1_1cell_B6_1 = oma_1_1cell_B6_1,
  oma_1_1cell_B10_2 = oma_1_1cell_B10_2,
  oma_1_1cell_B10_3 = oma_1_1cell_B10_3,
  oma_1_2cell_B4_1 = oma_1_2cell_B4_1,
  oma_1_2cell_B5_2 = oma_1_2cell_B5_2,
  oma_1_2cell_B6_3 = oma_1_2cell_B6_3,
  oma_1_2cell_B10_4 = oma_1_2cell_B10_4,
  oma_1_2cell_B8_5 = oma_1_2cell_B8_5,
  oma_1_2cell_B9_6 = oma_1_2cell_B9_6,
  oma_1_4cell_B4_1 = oma_1_4cell_B4_1,
  oma_1_4cell_B5_2 = oma_1_4cell_B5_2,
  oma_1_4cell_B6_3 = oma_1_4cell_B6_3,
  oma_1_4cell_B9_4 = oma_1_4cell_B9_4
)

convert_to_tibble_and_normalize <- function(df, df_name) {
  metadata <- as.data.frame(metadata(df)[[1]])
  
  # Use the dataframe name as the experiment name
  current_experiment <- df_name
  
  # Get the total reads for the current experiment
  total_reads <- metadata$total.reads[metadata$experiment == as.character(df$experiment[1])]
  
  result <- tibble(
    experiment = current_experiment,
    position = as.integer(df$position),
    count = as.numeric(df$count),
    total_reads = total_reads,
    cpm = (count / total_reads) * 1e6
  )
  
  # Add metadata columns
  for(col in names(metadata)) {
    if(col != "experiment") {
      result[[col]] <- metadata[[col]][metadata$experiment == as.character(df$experiment[1])]
    }
  }
  
  return(result)
}

# Now apply this function to all datasets and combine them
combined_normalized <- list_of_datasets %>%
  imap_dfr(~convert_to_tibble_and_normalize(.x, .y), .id = "source")

combined_normalized_simple <- combined_normalized |> 
  dplyr::select(experiment,position,cpm)

combined_tbl<- as.data.table(combined_normalized_simple
                             )
rcw_ribo <- dcast(combined_tbl ,  position~ experiment)
setcolorder(rcw_ribo,c("position",
                       "one_cell_B7_1" ,
  "one_cell_B10_2" ,
  "two_cell_B1_1",
  "two_cell_B2_2",
  "two_cell_B3_3" ,
  "two_cell_B7_4" ,
  "four_cell_B2_1",
  "four_cell_B3_2" ,
  "four_cell_B3_3" ,
  "four_cell_B7_4" ,
  "eight_cell_B3_1",
  "eight_cell_B7_2" ,
  "eight_cell_B8_3" ,
  "eight_cell_B9_4" ,
  "eight_cell_B10_5" ,
  "oma_1_1cell_B6_1" ,
  "oma_1_1cell_B10_2" ,
  "oma_1_1cell_B10_3" ,
  "oma_1_2cell_B4_1",
  "oma_1_2cell_B5_2" ,
  "oma_1_2cell_B6_3" ,
  "oma_1_2cell_B10_4" ,
  "oma_1_2cell_B8_5" ,
  "oma_1_2cell_B9_6",
  "oma_1_4cell_B4_1",
  "oma_1_4cell_B5_2",
  "oma_1_4cell_B6_3",
  "oma_1_4cell_B9_4"))

colnames(rcw_ribo) <- c( "position", 
                         "WT_1-cell_1",
                         "WT_1-cell_2",
                         "WT_2-cell_1",
                         "WT_2-cell_2" ,
                         "WT_2-cell_3",
                         "WT_2-cell_4",
                         "WT_4-cell_1",
                         "WT_4-cell_2",
                         "WT_4-cell_3",
                         "WT_4-cell_4" ,
                         "WT_8-cell_1",
                         "WT_8-cell_2",
                         "WT_8-cell_3" ,
                         "WT_8-cell_4",
                         "WT_8-cell_5",
                         "OMA-1_1-cell_1",
                         "OMA-1_1-cell_2",
                         "OMA-1_1-cell_3",
                         "OMA-1_2-cell_1" ,
                         "OMA-1_2-cell_2",
                         "OMA-1_2-cell_3" ,
                         "OMA-1_2-cell_4",
                         "OMA-1_2-cell_5" ,
                         "OMA-1_2-cell_6" ,
                         "OMA-1_4-cell_1",
                         "OMA-1_4-cell_2",
                         "OMA-1_4-cell_3" ,
                         "OMA-1_4-cell_4" 
                         ) 

combined <- melt(rcw_ribo, id.vars = "position" , variable.name ="experiment", value.name = "count", na.rm = TRUE) 

df <- combined %>%
  mutate(condition = str_extract(experiment, "WT|OMA"),
         # Remove 'WT' or 'OMA' from the 'experiment' column
         experiment = str_replace(experiment, "WT_|OMA-1_", ""))

wt_df <- df |> filter(condition %in% "WT") |> dplyr::select(-condition) |> relocate(experiment,position) |> filter(experiment %in% c("1-cell_1","2-cell_1","4-cell_1", "8-cell_1")) |> mutate(position_a_site = position +15)

stop_site_wt <- ggplot(wt_df, aes(x = position_a_site, y = count, color = experiment)) + 
geom_line() +
  scale_y_continuous(limits = c(0,2500), position = "right")+xlab("Position")+
  ylab(NULL)+
  my_custom_theme() +  
  scale_color_manual(values = cb_friendly_palette)+
  theme(legend.position = "top") +scale_x_continuous(
    limits = c(-30, 30),
    breaks = seq(-30, 30, by = 15),  # Set custom breaks
    expand = c(0, 0)
  )

OMA_df <- df |> filter(condition %in% "OMA") |> dplyr::select(-condition) |> relocate(experiment,position) |> filter(experiment %in% c("1-cell_1","2-cell_1","4-cell_1")) |> mutate(position_a_site = position +15)

stop_site_OMA <- ggplot(OMA_df, aes(x = position_a_site, y = count, color = experiment)) + 
geom_line() +
  scale_y_continuous(limits = c(0,2500),position = "right")+xlab("Position")+
  ylab(NULL)+ 
  my_custom_theme() +  
  scale_color_manual(values = cb_friendly_palette)+
  theme(legend.position = "top") +scale_x_continuous(
    limits = c(-30, 30),
    breaks = seq(-30, 30, by = 15),  # Set custom breaks
    expand = c(0, 0)
  )
```

### Presence of 30nt peak

```{r}
one_cell_B7_1 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 26,
                                                range.upper = 40,
                                                experiment = c('WT_1-cell_1'),
                                                length      = FALSE,
                                                transcript  = TRUE,
                                                tidy = T,
                                                region      = c("CDS")))

one_cell_B10_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 25,
                                                   range.upper = 39,
                                                   experiment = c('WT_1-cell_2'),
                                                   length = FALSE,
                                                   transcript = TRUE,
                                                   tidy = T,
                                                   region = c("CDS")))

two_cell_B1_1 <- as.data.table(get_region_counts(ITP.ribo,
                    range.lower = 26,
                    range.upper = 40,
                    experiment = c('WT_2-cell_1'),
                    length      = FALSE,
                    transcript  = TRUE,
                    tidy = T,
                    region      = c("CDS")))

two_cell_B2_2 <-as.data.table(get_region_counts(ITP.ribo,
                                  range.lower = 25,
                                  range.upper = 40,
                                  experiment = c('WT_2-cell_2'),
                                  length      = FALSE,
                                  transcript  = TRUE,
                                  tidy = T,
                                  region      = c("CDS")))

two_cell_B3_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 25,
                                                range.upper = 39,
                                                experiment = c('WT_2-cell_3'),
                                                length      = FALSE,
                                                transcript  = TRUE,
                                                tidy = T,
                                                region      = c("CDS")))

two_cell_B7_4 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 22,
                                                range.upper = 40,
                                                experiment = c('WT_2-cell_4'),
                                                length      = FALSE,
                                                transcript  = TRUE,
                                                tidy = T,
                                                region      = c("CDS")))

four_cell_B2_1 <- as.data.table(get_region_counts(ITP.ribo,
                                  range.lower = 23,
                                  range.upper = 40,
                                  experiment = c('WT_4-cell_1'),
                                  length      = FALSE,
                                  transcript  = TRUE,
                                  tidy = T,
                                  region      = c("CDS")))

four_cell_B3_2 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 24,
                                                 range.upper = 38,
                                                 experiment = c('WT_4-cell_2'),
                                                 length      = FALSE,
                                                 transcript  = TRUE,
                                                 tidy = T,
                                                 region      = c("CDS")))

four_cell_B3_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 22,
                                                 range.upper = 38,
                                                 experiment = c('WT_4-cell_3'),
                                                 length      = FALSE,
                                                 transcript  = TRUE,
                                                 tidy = T,
                                                 region      = c("CDS")))

four_cell_B7_4 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 23,
                                                 range.upper = 40,
                                                 experiment = c('WT_4-cell_4'),
                                                 length      = FALSE,
                                                 transcript  = TRUE,
                                                 tidy = T,
                                                 region      = c("CDS")))

eight_cell_B3_1 <- as.data.table(get_region_counts(ITP.ribo,
                                   range.lower = 22,
                                   range.upper = 40,
                                   experiment = c('WT_8-cell_1'),
                                   length      = FALSE,
                                   transcript  = TRUE,
                                   tidy = T,
                                   region      = c("CDS")))

eight_cell_B7_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 24,
                                                   range.upper = 40,
                                                   experiment = c('WT_8-cell_2'),
                                                   length      = FALSE,
                                                   transcript  = TRUE,
                                                   tidy = T,
                                                   region      = c("CDS")))

eight_cell_B8_3 <- as.data.table(get_region_counts(ITP.ribo,
                                                  range.lower = 22,
                                                  range.upper = 40,
                                                  experiment = c("WT_8-cell_3"),
                                                  length      = FALSE,
                                                  transcript  = TRUE,
                                                  tidy = T,
                                                  region      = c("CDS")))

eight_cell_B9_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 23,
                                                 range.upper = 40,
                                                 experiment = c("WT_8-cell_4"),
                                                 length      = FALSE,
                                                 transcript  = TRUE,
                                                 tidy = T,
                                                 region      = c("CDS")))

eight_cell_B10_5 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 23,
                                                   range.upper = 40,
                                                   experiment = c("WT_8-cell_5"),
                                                   length      = FALSE,
                                                   transcript  = TRUE,
                                                   tidy = T,
                                                   region      = c("CDS")))

oma_1_1cell_B6_1 <- as.data.table(get_region_counts(ITP.ribo,
                                    range.lower = 23,
                                    range.upper = 40,
                                    experiment = c('OMA-1_1-cell_1'),
                                    length      = FALSE,
                                    transcript  = TRUE,
                                    tidy = T,
                                    region      = c("CDS")))

oma_1_1cell_B10_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 25,
                                                     range.upper = 40,
                                                     experiment = c("OMA-1_1-cell_2"),
                                                     length      = FALSE,
                                                     transcript  = TRUE,
                                                     tidy = T,
                                                     region      = c("CDS")))

oma_1_1cell_B10_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 24,
                                                    range.upper = 40,
                                                    experiment = c("OMA-1_1-cell_3"),
                                                    length      = FALSE,
                                                    transcript  = TRUE,
                                                    tidy = T,
                                                    region      = c("CDS")))

oma_1_2cell_B4_1 <-  as.data.table(get_region_counts(ITP.ribo,
                                    range.lower = 26,
                                    range.upper = 40,
                                    experiment = c('OMA-1_2-cell_1'),
                                    length      = FALSE,
                                    transcript  = TRUE,
                                    tidy = T,
                                    region      = c("CDS")))

oma_1_2cell_B5_2 <- as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 24,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_2'),
                                      length      = FALSE,
                                      transcript  = TRUE,
                                      tidy = T,
                                      region      = c("CDS")))

oma_1_2cell_B6_3 <-  as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 29,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_3'),
                                      length      = FALSE,
                                      transcript  = TRUE,
                                      tidy = T,
                                      region      = c("CDS")))

oma_1_2cell_B10_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 25,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_2-cell_4'),
                                                     length      = FALSE,
                                                     transcript  = TRUE,
                                                     tidy = T,
                                                     region      = c("CDS")))

oma_1_2cell_B8_5 <- as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 23,
                                                    range.upper = 40,
                                                    experiment = c('OMA-1_2-cell_5'),
                                                    length      = FALSE,
                                                    transcript  = TRUE,
                                                    tidy = T,
                                                    region      = c("CDS")))

oma_1_2cell_B9_6 <-as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 24,
                                                   range.upper = 40,
                                                   experiment = c('OMA-1_2-cell_6'),
                                                   length      = FALSE,
                                                   transcript  = TRUE,
                                                   tidy = T,
                                                   region      = c("CDS")))

oma_1_4cell_B4_1 <- as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 27,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_1'),
                                      length      = FALSE,
                                      transcript  = TRUE,
                                      tidy = T,
                                      region      = c("CDS")))

oma_1_4cell_B5_2 <-  as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 26,
                                      range.upper = 39,
                                      experiment = c('OMA-1_4-cell_2'),
                                      length      = FALSE,
                                      transcript  = TRUE,
                                      tidy = T,
                                      region      = c("CDS")))

oma_1_4cell_B6_3 <-  as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 25,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_3'),
                                      length      = FALSE,
                                      transcript  = TRUE,
                                      tidy = T,
                                      region      = c("CDS")))

oma_1_4cell_B9_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 25,
                                                    range.upper = 40,
                                                    experiment = c('OMA-1_4-cell_4'),
                                                    length      = FALSE,
                                                    transcript  = TRUE,
                                                    tidy = T,
                                                    region      = c("CDS")))
```

```{r}
list_of_datasets <- list(one_cell_B7_1,
                         one_cell_B10_2,
                         two_cell_B1_1,
                         two_cell_B2_2 ,
                         two_cell_B3_3,
                         two_cell_B7_4,
                         four_cell_B2_1,
                         four_cell_B3_2,
                         four_cell_B3_3,
                         four_cell_B7_4 ,
                         eight_cell_B3_1,
                         eight_cell_B7_2,
                         eight_cell_B8_3 ,
                         eight_cell_B9_4,
                         eight_cell_B10_5,
                         oma_1_1cell_B6_1,
                         oma_1_1cell_B10_2,
                         oma_1_1cell_B10_3,
                         oma_1_2cell_B4_1 ,
                         oma_1_2cell_B5_2,
                         oma_1_2cell_B6_3 ,
                         oma_1_2cell_B10_4,
                         oma_1_2cell_B8_5 ,
                         oma_1_2cell_B9_6,
                         oma_1_4cell_B4_1,
                         oma_1_4cell_B5_2,
                         oma_1_4cell_B6_3 ,
                         oma_1_4cell_B9_4 
                       )
combined <- data.table()

for (dataset in list_of_datasets){
  
  combined <- rbind(combined,dataset)
}


rcw_ribo <- dcast(combined, length ~ experiment)




```

```{r}
combined <- melt(rcw_ribo, id.vars = "length" , variable.name ="experiment", value.name = "count", na.rm = TRUE) 


summary_df <- combined  %>%
  group_by(experiment) %>%
  summarise(sum_count = sum(count, na.rm = TRUE), .groups = 'drop')

region_length <- combined %>%
  left_join(summary_df, by = c("experiment"))

region_length <- region_length |> 
  mutate(read_percent = (count/sum_count)*100) 
region_length <- region_length[,!c('count','sum_count')]
df <- region_length %>%
  mutate(replicate_number = as.integer(str_extract(experiment, "\\d+$")))

# Remove the replicate number and preceding underscore from the 'experiment' column
df$experiment <- str_replace(df$experiment, "_\\d+$", "")

df <- df %>%
  mutate(condition = str_extract(experiment, "WT|OMA"),
         # Remove 'WT' or 'OMA' from the 'experiment' column
         experiment = str_replace(experiment, "WT_|OMA-1_", ""))



# Assuming region_length_WT is your dataframe
summary_data <- df %>%
  group_by(length, experiment,condition) %>%
  summarise(read_percent_mean = mean(read_percent, na.rm = TRUE),
            stdev = sd(read_percent, na.rm =TRUE),
            ymin = read_percent_mean - stdev,
            ymax = read_percent_mean + stdev,
            .groups = 'drop', na.rm = TRUE) |> na.omit()
  



region_length_WT <- summary_data |> filter(condition =="WT") 

# First set the color palette
cb_friendly_palette <- brewer.pal(4, "Dark2")

read_length_distribution_plot <- ggplot(region_length_WT, aes(x = length, y = read_percent_mean, color = experiment)) +
  geom_line() + 
  geom_point() +
  geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = experiment), color = NA, alpha = 0.1) +
  labs(y = "Reads aligned to CDS (%)", x = "Read length") +
  my_custom_theme() +
  scale_color_manual(values = cb_friendly_palette) +  # For lines and points
  scale_fill_manual(values = cb_friendly_palette)     # For ribbon fills





 
region_length_OMA <- summary_data |> filter(condition =="OMA") 

read_length_distribution_plot_OMA <- ggplot(region_length_OMA, aes(x = length, y = read_percent_mean, color = experiment)) +
  geom_line() + # Line for mean read_percent by experiment
  geom_point()+
  geom_ribbon(aes(ymin = ymin, ymax = ymax, fill = experiment),color = NA, alpha = 0.1) +
  theme_minimal() +
  labs(y = "Reads aligned to CDS (%)", x = "Read length") +
  my_custom_theme()+
  scale_color_manual(values = cb_friendly_palette) +  # For lines and points
  scale_fill_manual(values = cb_friendly_palette)     # For ribbon fills



  

  
```

## Extracting raw counts

```{r}

one_cell_B7_1 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 26,
                                                range.upper = 40,
                                                experiment = c('WT_1-cell_1'),
                                                length      = TRUE,
                                                transcript  = FALSE,
                                                tidy = F,
                                                region      = c("CDS")))

one_cell_B10_2 <- as.data.table (get_region_counts(ITP.ribo,
                                                   range.lower = 25,
                                                   range.upper = 39,
                                                   experiment = c('WT_1-cell_2'),
                                                   length = TRUE,
                                                   transcript = FALSE,
                                                   tidy = F,
                                                   region = c("CDS")
                                                   ))
                                                  

two_cell_B1_1 <- as.data.table(get_region_counts(ITP.ribo,
                    range.lower = 26,
                    range.upper = 40,
                    experiment = c('WT_2-cell_1'),
                    length      = TRUE,
                    transcript  = FALSE,
                    tidy = F,
                    region      = c("CDS") ))
two_cell_B2_2 <-as.data.table( get_region_counts(ITP.ribo,
                                  range.lower = 25,
                                  range.upper = 40,
                                  experiment = c('WT_2-cell_2'),
                                  length      = TRUE,
                                  transcript  = FALSE,
                                  tidy = F,
                                  region      = c("CDS") ))

two_cell_B3_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 25,
                                                range.upper = 39,
                                                experiment = c('WT_2-cell_3'),
                                                length      = TRUE,
                                                transcript  = FALSE,
                                                tidy = F,
                                                region      = c("CDS") ))

two_cell_B7_4 <-as.data.table(get_region_counts(ITP.ribo,
                                                range.lower = 22,
                                                range.upper = 40,
                                                experiment = c('WT_2-cell_4'),
                                                length      = TRUE,
                                                transcript  = FALSE,
                                                tidy = F,
                                                region      = c("CDS")))

four_cell_B2_1 <- as.data.table(get_region_counts(ITP.ribo,
                                  range.lower = 23,
                                  range.upper = 40,
                                  experiment = c('WT_4-cell_1'),
                                  length      = TRUE,
                                  transcript  = FALSE,
                                  tidy = F,
                                  region      = c("CDS") ))



four_cell_B3_2 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 24,
                                                 range.upper = 38,
                                                 experiment = c('WT_4-cell_2'),
                                                 length      = TRUE,
                                                 transcript  = FALSE,
                                                 tidy = F,
                                                 region      = c("CDS") ))
four_cell_B3_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 22,
                                                 range.upper = 38,
                                                 experiment = c('WT_4-cell_3'),
                                                 length      = TRUE,
                                                 transcript  = FALSE,
                                                 tidy = F,
                                                 region      = c("CDS") ))



four_cell_B7_4 <-as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 23,
                                                 range.upper = 40,
                                                 experiment = c('WT_4-cell_4'),
                                                 length      = TRUE,
                                                 transcript  = FALSE,
                                                 tidy = F,
                                                 region      = c("CDS")))

eight_cell_B3_1 <- as.data.table(get_region_counts(ITP.ribo,
                                   range.lower = 22,
                                   range.upper = 40,
                                   experiment = c('WT_8-cell_1'),
                                   length      = TRUE,
                                   transcript  = FALSE,
                                   tidy = F,
                                   region      = c("CDS")))

eight_cell_B7_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 24,
                                                   range.upper = 40,
                                                   experiment = c('WT_8-cell_2'),
                                                   length      = TRUE,
                                                   transcript  = FALSE,
                                                   tidy = F,
                                                   region      = c("CDS") ))
eight_cell_B8_3 <- as.data.table(get_region_counts(ITP.ribo,
                                                  range.lower = 22,
                                                  range.upper = 40,
                                                  experiment = c("WT_8-cell_3"),
                                                  length      = TRUE,
                                                  transcript  = FALSE,
                                                  tidy = F,
                                                  region      = c("CDS")))
eight_cell_B9_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                 range.lower = 23,
                                                 range.upper = 40,
                                                 experiment = c("WT_8-cell_4"),
                                                 length      = TRUE,
                                                 transcript  = FALSE,
                                                 tidy = F,
                                                 region      = c("CDS")))

eight_cell_B10_5 <- as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 23,
                                                   range.upper = 40,
                                                   experiment = c("WT_8-cell_5"),
                                                   length      = TRUE,
                                                   transcript  = FALSE,
                                                   tidy = F,
                                                   region      = c("CDS")))

oma_1_1cell_B6_1 <- as.data.table( get_region_counts(ITP.ribo,
                                    range.lower = 23,
                                    range.upper = 40,
                                    experiment = c('OMA-1_1-cell_1'),
                                    length      = TRUE,
                                    transcript  = FALSE,
                                    tidy = F,
                                    region      = c("CDS") ))
oma_1_1cell_B10_2 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 25,
                                                     range.upper = 40,
                                                     experiment = c("OMA-1_1-cell_2"),
                                             length      = TRUE,
                                              transcript  = FALSE,
                                               tidy = F,
                                           region      = c("CDS")))
oma_1_1cell_B10_3 <-as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 24,
                                                    range.upper = 40,
                                                    experiment = c("OMA-1_1-cell_3"),
                                                                   length      = TRUE,
                                                                   transcript  = FALSE,
                                                                   tidy = F,
                                                                   region      = c("CDS")))


oma_1_2cell_B4_1 <-  as.data.table(get_region_counts(ITP.ribo,
                                    range.lower = 26,
                                    range.upper = 40,
                                    experiment = c('OMA-1_2-cell_1'),
                                    length      = TRUE,
                                    transcript  = FALSE,
                                    tidy = F,
                                    region      = c("CDS") ))

oma_1_2cell_B5_2 <- as.data.table( get_region_counts(ITP.ribo,
                                      range.lower = 24,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_2'),
                                      length      = TRUE,
                                      transcript  = FALSE,
                                      tidy = F,
                                      region      = c("CDS") ))

oma_1_2cell_B6_3 <-  as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 29,
                                      range.upper = 40,
                                      experiment = c('OMA-1_2-cell_3'),
                                      length      = TRUE,
                                      transcript  = FALSE,
                                      tidy = F,
                                      region      = c("CDS") ))
oma_1_2cell_B10_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                     range.lower = 25,
                                                     range.upper = 40,
                                                     experiment = c('OMA-1_2-cell_4'),
                                                     length      = TRUE,
                                                     transcript  = FALSE,
                                                     tidy = F,
                                                     region      = c("CDS") ))
oma_1_2cell_B8_5 <- as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 23,
                                                    range.upper = 40,
                                                    experiment = c('OMA-1_2-cell_5'),
                                                    length      = TRUE,
                                                    transcript  = FALSE,
                                                    tidy = F,
                                                    region      = c("CDS") ))
oma_1_2cell_B9_6 <-as.data.table(get_region_counts(ITP.ribo,
                                                   range.lower = 24,
                                                   range.upper = 40,
                                                   experiment = c('OMA-1_2-cell_6'),
                                                   length      = TRUE,
                                                   transcript  = FALSE,
                                                   tidy = F,
                                                   region      = c("CDS") ))

oma_1_4cell_B4_1 <- as.data.table( get_region_counts(ITP.ribo,
                                      range.lower = 27,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_1'),
                                      length      = TRUE,
                                      transcript  = FALSE,
                                      tidy = F,
                                      region      = c("CDS") ))

oma_1_4cell_B5_2 <-  as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 26,
                                      range.upper = 39,
                                      experiment = c('OMA-1_4-cell_2'),
                                      length      = TRUE,
                                      transcript  = FALSE,
                                      tidy = F,
                                      region      = c("CDS")))

oma_1_4cell_B6_3 <-  as.data.table(get_region_counts(ITP.ribo,
                                      range.lower = 25,
                                      range.upper = 40,
                                      experiment = c('OMA-1_4-cell_3'),
                                      length      = TRUE,
                                      transcript  = FALSE,
                                      tidy = F,
                                      region      = c("CDS")))
oma_1_4cell_B9_4 <- as.data.table(get_region_counts(ITP.ribo,
                                                    range.lower = 25,
                                                    range.upper = 40,
                                                    experiment = c('OMA-1_4-cell_4'),
                                                    length      = TRUE,
                                                    transcript  = FALSE,
                                                    tidy = F,
                                                    region      = c("CDS") ))


list_of_datasets <- list(one_cell_B7_1,
                         one_cell_B10_2,
                         two_cell_B1_1,
                         two_cell_B2_2 ,
                         two_cell_B3_3,
                         two_cell_B7_4,
                         four_cell_B2_1,
                         four_cell_B3_2,
                         four_cell_B3_3,
                         four_cell_B7_4 ,
                         eight_cell_B3_1,
                         eight_cell_B7_2,
                         eight_cell_B8_3 ,
                         eight_cell_B9_4,
                         eight_cell_B10_5,
                         oma_1_1cell_B6_1,
                         oma_1_1cell_B10_2,
                         oma_1_1cell_B10_3,
                         oma_1_2cell_B4_1 ,
                         oma_1_2cell_B5_2,
                         oma_1_2cell_B6_3 ,
                         oma_1_2cell_B10_4,
                         oma_1_2cell_B8_5 ,
                         oma_1_2cell_B9_6,
                         oma_1_4cell_B4_1,
                         oma_1_4cell_B5_2,
                         oma_1_4cell_B6_3 ,
                         oma_1_4cell_B9_4 
                       )
combined <- data.table()

for (dataset in list_of_datasets){
  
  combined <- rbind(combined,dataset)
}

#combined [,CDS := (CDS+1)]
rcw_ribo <- dcast(combined, transcript ~ experiment)

name_of_column <- colnames(rcw_ribo[,-1])

colnames(rcw_ribo) <- c( "transcript", 
                         "one_cell_B7_1.RIBO",
                         "one_cell_B10_2.RIBO",
                         "two_cell_B1_1.RIBO",
                         "two_cell_B2_2.RIBO" ,
                         "two_cell_B3_3.RIBO",
                         "two_cell_B7_4.RIBO",
                         "four_cell_B2_1.RIBO",
                         "four_cell_B3_2.RIBO",
                         "four_cell_B3_3.RIBO",
                         "four_cell_B7_4.RIBO" ,
                         "eight_cell_B3_1.RIBO",
                         "eight_cell_B7_2.RIBO",
                         "eight_cell_B8_3.RIBO" ,
                         "eight_cell_B9_4.RIBO",
                         "eight_cell_B10_5.RIBO",
                         "oma_1_1cell_B6_1.RIBO",
                         "oma_1_1cell_B10_2.RIBO",
                         "oma_1_1cell_B10_3.RIBO",
                         "oma_1_2cell_B4_1.RIBO" ,
                         "oma_1_2cell_B5_2.RIBO",
                         "oma_1_2cell_B6_3.RIBO" ,
                         "oma_1_2cell_B10_4.RIBO",
                         "oma_1_2cell_B8_5.RIBO" ,
                         "oma_1_2cell_B9_6.RIBO",
                         "oma_1_4cell_B4_1.RIBO",
                         "oma_1_4cell_B5_2.RIBO",
                         "oma_1_4cell_B6_3.RIBO" ,
                         "oma_1_4cell_B9_4.RIBO" 
                         )


# RNAseq table 


rnaseq_neb <- get_rnaseq(ribo.object = RNASEQ.ribo,
                         tidy        = F,
                         compact = F,
                         region = "CDS")

rnaseq_neb <- as.data.table(rnaseq_neb)
#rnaseq_neb [,CDS := (CDS+1)]


rnaseq_w_diff = dcast(rnaseq_neb , transcript ~ experiment) 

colnames(rnaseq_w_diff) <- c("transcript" ,    
                              "OMA_1cell_B11_1.RNA",
                            "OMA_1cell_B12_2.RNA",
                            "OMA_1cell_B12_3.RNA",
                             "OMA_2cell_B11_1.RNA",
                              "OMA_2cell_B12_2.RNA",
                              "OMA_2cell_B12_3.RNA",
                            "OMA_4cell_B11_1.RNA",
                             "OMA_4cell_B12_1.RNA",
                            "OMA_4cell_B12_2.RNA",
                            "WT_1cell_B11_1.RNA" ,
                             "WT_1cell_B12_2.RNA" ,
                            "WT_1cell_B12_3.RNA" ,
                            "WT_2cell_B11_1.RNA" ,
                              "WT_2cell_B12_2.RNA", 
                             "WT_2cell_B12_3.RNA" ,
                            "WT_4cell_B11_1.RNA" ,
                             "WT_4cell_B12_2.RNA" ,
                           "WT_4cell_B12_3.RNA" ,
                            "WT_8cell_B11_1.RNA" ,
                            "WT_8cell_B12_2.RNA" ,
                             "WT_8cell_B12_3.RNA")
```

## Clean-up and processing raw counts

We remove the histone genes and also rename the long transcript names. The reason for removing histone genes is that we used polyA tail based RT instead of random hexamers. Histone mRNA don't have polyA tails in *C. elegans.*

```{r}
#Import Raw counts: 
rnaseq_neb_table <-as.data.table(rnaseq_w_diff)
rnaseq_neb_table[, transcript := as.character(transcript)]
# remove all histone genes: 

rnaseq_neb_table [, gene_name := sapply(strsplit(transcript, "gene_symbol:"), function(x) tail(x, n = 1))]


# Extract the first four characters of the gene_name column
first_four <- substring(rnaseq_neb_table$gene_name, 1, 4)

# Remove rows where the first four characters match "his-"
rnaseq_neb_table <- rnaseq_neb_table[!(first_four == "his-"), ]

# If you want to reset row indexes
rownames(rnaseq_neb_table) <- NULL

rnaseq_neb_table[,transcript:= NULL]
setcolorder(rnaseq_neb_table, c("gene_name", setdiff(names(rnaseq_neb_table), "gene_name")))

# doing the same for ribo-seq
ribo_counts <- as.data.table(rcw_ribo)
# remove all histone genes: 
ribo_counts [, transcript := as.character(transcript)]

ribo_counts [, gene_name := sapply(strsplit(transcript, "gene_symbol:"), function(x) tail(x, n = 1))]


# Extract the first four characters of the gene_name column
first_four <- substring(ribo_counts$gene_name, 1, 4)

# Remove rows where the first four characters match "his-"
ribo_counts<- ribo_counts[!(first_four == "his-"), ]

# If you want to reset row indexes


ribo_counts[,transcript:= NULL]

setcolorder(ribo_counts, c("gene_name", setdiff(names(ribo_counts), "gene_name")))
```

## Filter by cpm and batch correction

Observe that it returns the final matrix as raw counts but it filters by cpm. We will now filter the table. The parameters I am using are:

-   RNA-seq: 10 cpm in atleast 18 of the samples. We have 21 samples in total.
-   Riboseq - 3 cpm in atleast 10 samples.

The RNAseq filtering is more strigent to identify transcripts that robustly present. The Ribo-seq is less stringent to identify transcripts that might translationally repressed.

```{r}
rnaseq_neb_table_filter<- filter_genes_by_cpm_with_transcripts(rnaseq_neb_table,18,10)

ribo_counts_table_filter<- filter_genes_by_cpm_with_transcripts(ribo_counts,10,3)
ribo_counts_table <- as.matrix(ribo_counts_table_filter[,-1])
```

We the use the SVA package to apply batch correction. More specifically, we use combat_seq (Yuqing Zhang et al 2020) that is meant to be used on RNAseq data. We also used two covariate parameters, namely: cell stage and WT/mut

```{r}
rnaseq_neb_counts <- as.matrix(rnaseq_neb_table_filter[,-1])

covar_1 <- c(rep(1,3),rep(2,3),rep(4,3),rep(1,3),rep(2,3),rep(4,3),rep(8,3))
covar_2 <- c(rep(1,9),rep(0,12))
covar_matrix <- cbind(covar_1,covar_2)
batch <- c(11,12,12,11,12,12,11,12,12,11,12,12,11,12,12,11,12,12,11,12,12)
adjusted_RNA <- ComBat_seq(rnaseq_neb_counts , batch=batch, group = NULL, covar_mod = covar_matrix)

adjusted_table_RNA <-as.data.table(cbind(rnaseq_neb_table_filter[,1],adjusted_RNA ))

# Ribosome profiling 
batch <- c(7,10,2,2,3,7,2,3,3,7,3,7,8,9,10,6,10,10,4,5,6,10,8,9,4,5,6,9)
covar_1 <-c(1,1,2,2,2,2,4,4,4,4,8,8,8,8,8,1,1,1,2,2,2,2,2,2,4,4,4,4)
covar_2 <-c(rep(0,15),rep(1,13))
cov_matrix = cbind(covar_1,covar_2)
adjusted_ribo <- ComBat_seq(ribo_counts_table , batch=batch, group = NULL , covar_mod = cov_matrix)
adjusted_table_ribo <- cbind(ribo_counts_table_filter[,1],adjusted_ribo)



```

## Assessing replicate variability

We can assess the replicate to replicate variability for each sample

```{r}

column_sums <- colSums(adjusted_table_RNA[,-c(1)])
correlation_plots <- calculate_correlations(adjusted_table_RNA[,-1] )

## RNASEQ
#one-cell WT replicates
arranged_plots <- list(correlation_plots[["WT_1cell_B11_1.RNA_vs_WT_1cell_B12_2.RNA_correlation"]],
                       correlation_plots[["WT_1cell_B11_1.RNA_vs_WT_1cell_B12_3.RNA_correlation"]],
                       correlation_plots[["WT_1cell_B12_2.RNA_vs_WT_1cell_B12_3.RNA_correlation"]])

#two-cell WT replicates
arranged_plots <- list(correlation_plots[["WT_2cell_B11_1.RNA_vs_WT_2cell_B12_2.RNA_correlation"]],
                       correlation_plots[["WT_2cell_B11_1.RNA_vs_WT_2cell_B12_3.RNA_correlation"]],
                       correlation_plots[["WT_2cell_B12_2.RNA_vs_WT_2cell_B12_3.RNA_correlation"]])

#four-cell WT replicates
arranged_plots <- list(correlation_plots[["WT_4cell_B11_1.RNA_vs_WT_4cell_B12_2.RNA_correlation"]],
                       correlation_plots[["WT_4cell_B11_1.RNA_vs_WT_4cell_B12_3.RNA_correlation"]],
                       correlation_plots[["WT_4cell_B12_2.RNA_vs_WT_4cell_B12_3.RNA_correlation"]])

#eight-cell WT replicates 

arranged_plots <- list(correlation_plots[["WT_8cell_B11_1.RNA_vs_WT_8cell_B12_2.RNA_correlation"]],
                       correlation_plots[["WT_8cell_B11_1.RNA_vs_WT_8cell_B12_3.RNA_correlation"]],
                       correlation_plots[["WT_8cell_B12_2.RNA_vs_WT_8cell_B12_3.RNA_correlation"]])

#one-cell OMA replicates
arranged_plots <- list(correlation_plots[["OMA_1cell_B11_1.RNA_vs_OMA_1cell_B12_2.RNA_correlation"]],
                       correlation_plots[["OMA_1cell_B11_1.RNA_vs_OMA_1cell_B12_3.RNA_correlation"]],
                       correlation_plots[["OMA_1cell_B12_2.RNA_vs_OMA_1cell_B12_3.RNA_correlation"]])

#two-cell OMA replicates
arranged_plots <- list(correlation_plots[["OMA_2cell_B11_1.RNA_vs_OMA_2cell_B12_2.RNA_correlation"]],
                       correlation_plots[["OMA_2cell_B11_1.RNA_vs_OMA_2cell_B12_3.RNA_correlation"]],
                       correlation_plots[["OMA_2cell_B12_2.RNA_vs_OMA_2cell_B12_3.RNA_correlation"]])

#four-cell OMA replicates
arranged_plots <- list(correlation_plots[["OMA_4cell_B11_1.RNA_vs_OMA_4cell_B12_1.RNA_correlation"]],
                       correlation_plots[["OMA_4cell_B11_1.RNA_vs_OMA_4cell_B12_2.RNA_correlation"]],
                       correlation_plots[["OMA_4cell_B12_1.RNA_vs_OMA_4cell_B12_2.RNA_correlation"]])

## Ribosome profiling 

correlation_plots <- calculate_correlations(cpm(adjusted_table_ribo[,-1] ))

one_cell_correlation <-  correlation_plots[["one_cell_B7_1.RIBO_vs_one_cell_B10_2.RIBO_correlation"]]+ my_custom_theme() + labs(subtitle = "1-cell")+
 xlab("Replicate-1 (CPM)") + ylab("Replicate-2 (CPM)") + theme(legend.position = "none",
       plot.subtitle = element_text(size = 8,hjust = 0.5)) 

two_cell_correlation <- correlation_plots[["two_cell_B1_1.RIBO_vs_two_cell_B2_2.RIBO_correlation"]]+ my_custom_theme() + theme(legend.position = "none") + xlab("Replicate-1 (CPM)") + ylab("Replicate-2 (CPM)")+labs(subtitle = "2-cell")+ theme(legend.position = "none",
       plot.subtitle = element_text(size = 8,hjust = 0.5)) 

four_cell_correlation <- correlation_plots[["four_cell_B2_1.RIBO_vs_four_cell_B3_2.RIBO_correlation"]]+ my_custom_theme() + theme(legend.position = "none") + xlab("Replicate-1 (CPM)") + ylab("Replicate-2 (CPM)")+labs(subtitle = "4-cell")+ theme(legend.position = "none",
       plot.subtitle = element_text(size = 8,hjust = 0.5)) 

eight_cell_correlation <- correlation_plots[["eight_cell_B3_1.RIBO_vs_eight_cell_B8_3.RIBO_correlation"]]+ my_custom_theme() + theme(legend.position = "none") + xlab("Replicate-1 (CPM)") + ylab("Replicate-2 (CPM)")+labs(subtitle = "8-cell")+ theme(legend.position = "none",
       plot.subtitle = element_text(size = 8, hjust = 0.5),
       )


```

We make a heatmap that shows the correlation between each replicate

```{r}
correlation_matrix <- cor(adjusted_table_RNA[, c(2:22)], method = "spearman")
corr_matrix <- signif(correlation_matrix, digits = 2)
colnames(corr_matrix)<- c(
  "OMA_1-cell_1",
  "OMA_1-cell_2",
  "OMA_1-cell_3",
  "OMA_2-cell_1",
  "OMA_2-cell_2",
  "OMA_2-cell_3",
  "OMA_4-cell_1",
  "OMA_4-cell_2",
  "OMA_4-cell_3",
  "WT_1-cell_1" ,
  "WT_1-cell_2" ,
  "WT_1-cell_3" ,
  "WT_2-cell_1" ,
  "WT_2-cell_2", 
  "WT_2-cell_3" ,
  "WT_4-cell_1" ,
  "WT_4-cell_2" ,
  "WT_4-cell_3" ,
  "WT_8-cell_1" ,
  "WT_8-cell_2" ,
  "WT_8-cell_3"
)
rownames(corr_matrix)<- c(
  "OMA_1-cell_1",
  "OMA_1-cell_2",
  "OMA_1-cell_3",
  "OMA_2-cell_1",
  "OMA_2-cell_2",
  "OMA_2-cell_3",
  "OMA_4-cell_1",
  "OMA_4-cell_2",
  "OMA_4-cell_3",
  "WT_1-cell_1" ,
  "WT_1-cell_2" ,
  "WT_1-cell_3" ,
  "WT_2-cell_1" ,
  "WT_2-cell_2", 
  "WT_2-cell_3" ,
  "WT_4-cell_1" ,
  "WT_4-cell_2" ,
  "WT_4-cell_3" ,
  "WT_8-cell_1" ,
  "WT_8-cell_2" ,
  "WT_8-cell_3"
)


# Get lower triangle
cor_long <- get_lower_tri(corr_matrix)

# Clean variable names
cor_long$Var1_cleaned <- sapply(strsplit(as.character(cor_long$Var1), "_"), paste, collapse = "_")
cor_long$Var2_cleaned <- sapply(strsplit(as.character(cor_long$Var2), "_"), paste, collapse = "_")

# Ensure correct ordering for lower triangle
cor_long$Var1_cleaned <- factor(cor_long$Var1_cleaned, levels = rev(unique(cor_long$Var1_cleaned)))
cor_long$Var2_cleaned <- factor(cor_long$Var2_cleaned, levels = unique(cor_long$Var2_cleaned))

# Separate WT and OMA data
wt_data <- cor_long %>%
  filter(grepl("^WT", Var1_cleaned) & grepl("^WT", Var2_cleaned)) %>%
  dplyr::select(-c(Var1, Var2))

oma_data <- cor_long %>%
  filter(grepl("^OMA", Var1_cleaned) & grepl("^OMA", Var2_cleaned)) %>%
  dplyr::select(-c(Var1, Var2))



# Create the two plots
WT_rna_correlation <- create_correlation_plot(wt_data)
OMA_rna_correlation <- create_correlation_plot(oma_data)



### RIbsome profiling 
# Create the correlation matrix
correlation_matrix_ribo <- cor(cpm(ribo_counts[, c(2:29)]), method = "spearman")
corr_matrix_ribo <- signif(correlation_matrix_ribo, digits = 2)
colnames(corr_matrix_ribo)<- c(
  "WT_1-cell_1",
  "WT_1-cell_2",
  "WT_2-cell_1",
  "WT_2-cell_2" ,
  "WT_2-cell_3",
  "WT_2-cell_4",
  "WT_4-cell_1",
  "WT_4-cell_2",
  "WT_4-cell_3",
  "WT_4-cell_4" ,
  "WT_8-cell_1",
  "WT_8-cell_2",
  "WT_8-cell_3" ,
  "WT_8-cell_4",
  "WT_8-cell_5",
  "OMA-1_1-cell_1",
  "OMA-1_1-cell_2",
  "OMA-1_1-cell_3",
  "OMA-1_2-cell_1" ,
  "OMA-1_2-cell_2",
  "OMA-1_2-cell_3" ,
  "OMA-1_2-cell_4",
  "OMA-1_2-cell_5" ,
  "OMA-1_2-cell_6" ,
  "OMA-1_4-cell_1",
  "OMA-1_4-cell_2",
  "OMA-1_4-cell_3" ,
  "OMA-1_4-cell_4" 
)
rownames(corr_matrix_ribo)<- c(
  "WT_1-cell_1",
  "WT_1-cell_2",
  "WT_2-cell_1",
  "WT_2-cell_2" ,
  "WT_2-cell_3",
  "WT_2-cell_4",
  "WT_4-cell_1",
  "WT_4-cell_2",
  "WT_4-cell_3",
  "WT_4-cell_4" ,
  "WT_8-cell_1",
  "WT_8-cell_2",
  "WT_8-cell_3" ,
  "WT_8-cell_4",
  "WT_8-cell_5",
  "OMA-1_1-cell_1",
  "OMA-1_1-cell_2",
  "OMA-1_1-cell_3",
  "OMA-1_2-cell_1" ,
  "OMA-1_2-cell_2",
  "OMA-1_2-cell_3" ,
  "OMA-1_2-cell_4",
  "OMA-1_2-cell_5" ,
  "OMA-1_2-cell_6" ,
  "OMA-1_4-cell_1",
  "OMA-1_4-cell_2",
  "OMA-1_4-cell_3" ,
  "OMA-1_4-cell_4" 
)

# Get lower triangle
cor_long_ribo <- get_lower_tri(corr_matrix_ribo)

# Clean variable names
cor_long_ribo$Var1_cleaned <- sapply(strsplit(as.character(cor_long_ribo$Var1), "_"), paste, collapse = "_")
cor_long_ribo$Var2_cleaned <- sapply(strsplit(as.character(cor_long_ribo$Var2), "_"), paste, collapse = "_")

# Ensure correct ordering for lower triangle
cor_long_ribo$Var1_cleaned <- factor(cor_long_ribo$Var1_cleaned, levels = rev(unique(cor_long$Var1_cleaned)))
cor_long_ribo$Var2_cleaned <- factor(cor_long_ribo$Var2_cleaned, levels = unique(cor_long_ribo$Var2_cleaned))

# Separate WT and OMA data
wt_data_ribo <- cor_long_ribo %>%
  filter(grepl("^WT", Var1_cleaned) & grepl("^WT", Var2_cleaned)) %>%
  dplyr::select(-c(Var1, Var2))

oma_data_ribo <- cor_long_ribo %>%
  filter(grepl("^OMA", Var1_cleaned) & grepl("^OMA", Var2_cleaned)) %>%
  dplyr::select(-c(Var1, Var2))


# Create the two plots
WT_ribo_correlation <- create_correlation_plot(wt_data_ribo)
OMA_ribo_correlation <- create_correlation_plot(oma_data_ribo)


```

```{r}

# Get lower triangle
cor_long <- get_lower_tri(corr_matrix)

# Clean variable names
cor_long$Var1_cleaned <- sapply(strsplit(as.character(cor_long$Var1), "_"), paste, collapse = "_")
cor_long$Var2_cleaned <- sapply(strsplit(as.character(cor_long$Var2), "_"), paste, collapse = "_")

# Ensure correct ordering for lower triangle
cor_long$Var1_cleaned <- factor(cor_long$Var1_cleaned, levels = rev(unique(cor_long$Var1_cleaned)))
cor_long$Var2_cleaned <- factor(cor_long$Var2_cleaned, levels = unique(cor_long$Var2_cleaned))

# Separate WT and OMA data
wt_data <- cor_long %>%
  filter(grepl("^WT", Var1_cleaned) & grepl("^WT", Var2_cleaned)) %>%
  dplyr::select(-c(Var1, Var2))

oma_data <- cor_long %>%
  filter(grepl("^OMA", Var1_cleaned) & grepl("^OMA", Var2_cleaned)) %>%
  dplyr::select(-c(Var1, Var2))

```

To visualise the relationship between the different samples we make a multi-dimensional scaling plot

```{r}
adjusted_table_RNA_MDS <- adjusted_table_RNA
colnames(adjusted_table_RNA_MDS) <-c( "transcript",
  "OMA_1-cell_1",
  "OMA_1-cell_2",
  "OMA_1-cell_3",
  "OMA_2-cell_1",
  "OMA_2-cell_2",
  "OMA_2-cell_3",
  "OMA_4-cell_1",
  "OMA_4-cell_2",
  "OMA_4-cell_3",
  "WT_1-cell_1" ,
  "WT_1-cell_2" ,
  "WT_1-cell_3" ,
  "WT_2-cell_1" ,
  "WT_2-cell_2", 
  "WT_2-cell_3" ,
  "WT_4-cell_1" ,
  "WT_4-cell_2" ,
  "WT_4-cell_3" ,
  "WT_8-cell_1" ,
  "WT_8-cell_2" ,
  "WT_8-cell_3")


exptype <- factor(rep(c("omaonecell.RNA",
                    "omatwocell.RNA",
                    "omafourcell.RNA",
                    "onecell.RNA",
                    "twocell.RNA",
                    "fourcell.RNA",
                    "eightcell.RNA"),times = c(3,3,3,3,3,3,3)  ))

y <- DGEList(counts=adjusted_table_RNA_MDS[,c(2:22)],
             group=exptype, genes = adjusted_table_RNA_MDS[,1])

y <- calcNormFactors(y, method = "TMM")
design <- model.matrix(~0+exptype)
colnames(design) <- levels(exptype)
y <- estimateDisp(y,design)
#plotBCV(y[,c(1:9)])

#plotMDS(y)
# Create a color-blind friendly color palette
cb_friendly_palette <- brewer.pal(4, "Dark2")  # We need 4 colors (1-cell, 2-cell, 4-cell, 8-cell)

# Create a new factor for stages with correct order and labels
stages <- factor(gsub(".*?(one|two|four|eight)cell.*", "\\1cell", tolower(as.character(exptype))),
                 levels = c("onecell", "twocell", "fourcell", "eightcell"),
                 labels = c("1-cell", "2-cell", "4-cell", "8-cell"))

# Create a vector for shapes
shapes <- ifelse(grepl("oma", tolower(as.character(exptype))), 17, 16)  # 17 for filled triangles (OMA-1), 16 for filled circles (WT)

# Create named vectors for colors and shapes
stage_colors <- setNames(cb_friendly_palette, levels(stages))
group_shapes <- setNames(c(16, 17), c("WT", "OMA-1"))  # 16 for circles (WT), 17 for triangles (OMA-1)

# Perform MDS
mds_result <- plotMDS(y, plot = FALSE)

# Create a data frame for ggplot
plot_data <- data.frame(
  x = mds_result$x,
  y = mds_result$y,
  stage = stages,
  group = factor(ifelse(grepl("oma", tolower(as.character(exptype))), "OMA-1", "WT"), 
                 levels = c("WT", "OMA-1"))  # Set factor levels to control legend order
)

RNA_MDS_plot <- ggplot(plot_data, aes(x = x, y = y, color = stage, shape = group)) +
  geom_point(size = 3) +
  scale_color_manual(values = stage_colors) +
  scale_shape_manual(values = group_shapes, breaks = c("WT", "OMA-1")) +
  labs(
    x = sprintf("%s (%0.1f%%)", mds_result$axislabel, mds_result$var.explained[1] * 100),
    y = sprintf("%s (%0.1f%%)", mds_result$axislabel, mds_result$var.explained[2] * 100)
  ) +
  guides(
    color = guide_legend(title = "Stages", override.aes = list(shape = 15)),
    shape = guide_legend(title = "Groups")
  ) +
  my_custom_theme() +
  theme(
    legend.position = "bottom",
    legend.box = "vertical",      
    legend.spacing = unit(0.1, "cm"), 
    legend.box.just = "left"  ,
    legend.justification = "center"
  )

### 
adjusted_table_ribo_MDS <- adjusted_table_ribo
colnames(adjusted_table_ribo_MDS) <- c( "gene_name",
"WT_1-cell_1",
                         "WT_1-cell_2",
                         "WT_2-cell_1",
                         "WT_2-cell_2" ,
                         "WT_2-cell_3",
                         "WT_2-cell_4",
                         "WT_4-cell_1",
                         "WT_4-cell_2",
                         "WT_4-cell_3",
                         "WT_4-cell_4" ,
                         "WT_8-cell_1",
                         "WT_8-cell_2",
                         "WT_8-cell_3" ,
                         "WT_8-cell_4",
                         "WT_8-cell_5",
                         "OMA-1_1-cell_1",
                         "OMA-1_1-cell_2",
                         "OMA-1_1-cell_3",
                         "OMA-1_2-cell_1" ,
                         "OMA-1_2-cell_2",
                         "OMA-1_2-cell_3" ,
                         "OMA-1_2-cell_4",
                         "OMA-1_2-cell_5" ,
                         "OMA-1_2-cell_6" ,
                         "OMA-1_4-cell_1",
                         "OMA-1_4-cell_2",
                         "OMA-1_4-cell_3" ,
                         "OMA-1_4-cell_4" )

exptype <- factor(rep(c('onecell.RIBO',
                        'twocell.RIBO',
                        'fourcell.RIBO',
                        'eightcell.RIBO',
                        'omaonecell.RIBO',
                        'omatwocell.RIBO',
                        'omafourcell.RIBO'),times = c(2,4,4,5,3,6,4)  ))

y <- DGEList(counts=adjusted_table_ribo_MDS[,c(2:29)],
             group=exptype, genes = adjusted_table_ribo_MDS[,1])

y <- calcNormFactors(y, method = "TMM")
design <- model.matrix(~0+exptype)
colnames(design) <- levels(exptype)
y <- estimateDisp(y,design)



# Create a color-blind friendly color palette
 # We need 4 colors (1-cell, 2-cell, 4-cell, 8-cell)

# Create a new factor for stages with correct order and labels
stages <- factor(gsub(".*?(one|two|four|eight)cell.*", "\\1cell", tolower(as.character(exptype))),
                 levels = c("onecell", "twocell", "fourcell", "eightcell"),
                 labels = c("1-cell", "2-cell", "4-cell", "8-cell"))

# Create a vector for shapes
shapes <- ifelse(grepl("oma", tolower(as.character(exptype))), 17, 16)  # 17 for filled triangles (OMA-1), 16 for filled circles (WT)

# Create named vectors for colors and shapes
stage_colors <- setNames(cb_friendly_palette, levels(stages))
group_shapes <- setNames(c(17, 16), c("OMA-1", "WT"))

# Create the MDS plot
mds_result <- plotMDS(y, plot = FALSE)

# Function to create the MDS plot using ggplot2
create_mds_plot_ggplot <- function(y, stage_colors, stages, shapes) {
  # Perform MDS
  mds_result <- plotMDS(y, plot = FALSE)
  
  # Create a data frame for ggplot
  plot_data <- data.frame(
    x = mds_result$x,
    y = mds_result$y,
    stage = stages,
    group = factor(ifelse(shapes == 16, "WT", "OMA-1"), levels = c("WT", "OMA-1"))  # Set WT as the first level
  )
  
  # Create the plot
  test <- ggplot(plot_data, aes(x = x, y = y, color = stage, shape = group)) +
    geom_point(size = 3) +  # Removed alpha as per your previous request
    scale_color_manual(values = stage_colors) +
    scale_shape_manual(values = c(WT = 16, `OMA-1` = 17), breaks = c("WT", "OMA-1")) +  # Explicitly set order
    labs(
      x = sprintf("%s (%0.1f%%)", mds_result$axislabel, mds_result$var.explained[1] * 100),
      y = sprintf("%s (%0.1f%%)", mds_result$axislabel, mds_result$var.explained[2] * 100)
    ) +
    theme_minimal() +
    theme(
      text = element_text(family = "Helvetica"),
      legend.position = "right",
      legend.title = element_text(size = 8),
      legend.text = element_text(size = 8),
      axis.title = element_text(size = 8),
      axis.text = element_text(size = 8),
      panel.grid.major = element_line(color = "grey90"),
      panel.grid.minor = element_blank(),
      panel.border = element_rect(color = "black", fill = NA, size = 0.5)
    ) +
    guides(
      color = guide_legend(title = "Stages", override.aes = list(shape = 15)),
      shape = guide_legend(title = "Groups")
    ) + 
    my_custom_theme() +
    theme(
    legend.position = "bottom",
    legend.box = "vertical",      
    legend.spacing = unit(0.1, "cm"), 
    legend.box.just = "left"  ,
    legend.justification = "center"
  )
  
  return(test)
}

# Use the function to create the plot
Ribo_mds_plot <- create_mds_plot_ggplot(y, stage_colors, stages, shapes)

MDS_patch <- RNA_MDS_plot + Ribo_mds_plot + plot_layout(guides = 'collect')


```

## Assessing 8-cell identity (RNA-seq)

```{r}
raw_counts_check<-  cbind( rnaseq_neb_table[,1],round(cpm( rnaseq_neb_table[,-1]),2))

colnames(raw_counts_check) <-   c( "gene_name",
  "OMA_1-cell_1",
  "OMA_1-cell_2",
  "OMA_1-cell_3",
  "OMA_2-cell_1",
  "OMA_2-cell_2",
  "OMA_2-cell_3",
  "OMA_4-cell_1",
  "OMA_4-cell_2",
  "OMA_4-cell_3",
  "WT_1-cell_1" ,
  "WT_1-cell_2" ,
  "WT_1-cell_3" ,
  "WT_2-cell_1" ,
  "WT_2-cell_2", 
  "WT_2-cell_3" ,
  "WT_4-cell_1" ,
  "WT_4-cell_2" ,
  "WT_4-cell_3" ,
  "WT_8-cell_1" ,
  "WT_8-cell_2" ,
  "WT_8-cell_3")


eight_cell_specfic <- raw_counts_check [,-c(2:10)]|> filter (gene_name %in% c( "med-1","med-2","end-1","end-3","skr-10","tbx-31","tbx-40","sdz-31","pes-10","cey-2"))

create_gene_plot <- function(gene_data) {
  gene_name <- gene_data$gene_name[1]
  
  # Reshape the data
  long_data <- gene_data %>%
    pivot_longer(cols = -gene_name, 
                 names_to = "condition", 
                 values_to = "count") %>%
    mutate(
      cell_stage = factor(case_when(
        grepl("1-cell", condition) ~ "1-cell",
        grepl("2-cell", condition) ~ "2-cell",
        grepl("4-cell", condition) ~ "4-cell",
        grepl("8-cell", condition) ~ "8-cell",
        TRUE ~ "Other"
      ), levels = c("1-cell", "2-cell", "4-cell", "8-cell", "Other"))
    )

  # Create the plot
  p <- ggplot(long_data, aes(x = condition, y = count, fill = cell_stage)) +
    geom_bar(stat = "identity") +
    labs(title = gene_name, y = "Count") +
    scale_fill_brewer(palette = "Set2") +  # You can change the color palette here
    theme_minimal() +
    theme(
      axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5, size = 8),
      axis.title.x = element_blank(),
      plot.title = element_text(size = 10, hjust = 0.5)
    )
  
  return(p)
}

# Create a list of plots, one for each gene
plot_list <- lapply(split(eight_cell_specfic, eight_cell_specfic$gene_name), create_gene_plot)

# Combine plots using patchwork
combined_plot_8_cell <- wrap_plots(plot_list, ncol = 5) +
  plot_layout(axes = "collect", guides = 'collect') &
  theme(
    axis.text.x = element_blank(),
    legend.position = 'bottom',
    legend.justification = 'center',
    legend.title = element_blank())

```

## Final table

We merge the filtered and processed Ribo count and RNA counts. This gives us a list of 4905 genes that we analyse

```{r}

all_counts <- merge.data.table(adjusted_table_ribo,adjusted_table_RNA )

```

# Analysis

## Correlation between Ribosome Occupancy and RNA abundance

```{r}

one_cell_WT_RNA_vs_RIBO_plot  <- plot_pairwise_relationships_reliability(
  all_counts, 
  id1_columns = c( "WT_1cell_B11_1.RNA",
                   "WT_1cell_B12_2.RNA",
                   "WT_1cell_B12_3.RNA"),
  id2_columns = c("one_cell_B7_1.RIBO",  
                  "one_cell_B10_2.RIBO"),
  main = "1-cell"
)
#TWO CELL:
two_cell_WT_RNA_vs_RIBO_plot  <- plot_pairwise_relationships_reliability(
  all_counts, 
  id1_columns = c("WT_2cell_B11_1.RNA", 
                  "WT_2cell_B12_2.RNA", 
                  "WT_2cell_B12_3.RNA"),
  id2_columns = c("two_cell_B1_1.RIBO",
                  "two_cell_B2_2.RIBO", 
                  "two_cell_B3_3.RIBO", 
                  "two_cell_B7_4.RIBO"),
  main = "2-cell"
)
#FOUR CELL: 
four_cell_WT_RNA_vs_RIBO_plot  <- plot_pairwise_relationships_reliability(
  all_counts, 
  id1_columns = c("WT_4cell_B11_1.RNA", 
                  "WT_4cell_B12_2.RNA", 
                  "WT_4cell_B12_3.RNA"),
  id2_columns = colnames(all_counts[,c(8:11)]),
  main = "4-cell"
)
#EIGHT CELL:
eight_cell_WT_RNA_vs_RIBO_plot <- plot_pairwise_relationships_reliability(
  all_counts, 
  id1_columns = colnames(all_counts[,c(48:50)]),
  id2_columns = colnames(all_counts[,c(12:16)]),
  main = "8-cell"
)

#OMA-1 onecell 
oma_one_cell_WT_RNA_vs_RIBO_plot <- plot_pairwise_relationships_reliability(
  all_counts, 
  id1_columns = colnames(all_counts[,c(30:32)]),
  id2_columns = colnames(all_counts[,c(17:19)]),
  main = "1-cell (zu405)"
)

#OMA-1 TWO CELL:
oma_two_cell_WT_RNA_vs_RIBO_plot  <- plot_pairwise_relationships_reliability(
  all_counts, 
  id1_columns = c(colnames(all_counts[,c(33:35)] )),
  id2_columns = c(colnames(all_counts[,c(20:25)])),
  main = "2-cell (zu405)")


#OMA FOUR CELL: 

oma_four_cell_WT_RNA_vs_RIBO_plot  <- plot_pairwise_relationships_reliability(
  all_counts, 
  id1_columns = c(colnames(all_counts[,c(36:38)] )),
  id2_columns = c(colnames(all_counts[,c(26:29)])),
  main = "4-cell (zu405)"
)


```

## Pairwise comparision of Ribosome occupancy, RNA abundance and Translational efficiency

```{r}

adjusted_table_ribo_MDS <- adjusted_table_ribo
colnames(adjusted_table_ribo_MDS) <- c( "gene_name",
                                        "WT_1-cell_1.RIBO",
                                        "WT_1-cell_2.RIBO",
                                        "WT_2-cell_1.RIBO",
                                        "WT_2-cell_2.RIBO",
                                        "WT_2-cell_3.RIBO",
                                        "WT_2-cell_4.RIBO",
                                        "WT_4-cell_1.RIBO",
                                        "WT_4-cell_2.RIBO",
                                        "WT_4-cell_3.RIBO",
                                        "WT_4-cell_4.RIBO",
                                        "WT_8-cell_1.RIBO",
                                        "WT_8-cell_2.RIBO",
                                        "WT_8-cell_3.RIBO",
                                        "WT_8-cell_4.RIBO",
                                        "WT_8-cell_5.RIBO",
                                        "OMA-1_1-cell_1.RIBO",
                                        "OMA-1_1-cell_2.RIBO",
                                        "OMA-1_1-cell_3.RIBO",
                                        "OMA-1_2-cell_1.RIBO",
                                        "OMA-1_2-cell_2.RIBO",
                                        "OMA-1_2-cell_3.RIBO",
                                        "OMA-1_2-cell_4.RIBO",
                                        "OMA-1_2-cell_5.RIBO",
                                        "OMA-1_2-cell_6.RIBO",
                                        "OMA-1_4-cell_1.RIBO",
                                        "OMA-1_4-cell_2.RIBO",
                                        "OMA-1_4-cell_3.RIBO",
                                        "OMA-1_4-cell_4.RIBO" )

exptype <- factor(rep(c('onecell.RIBO',
                        'twocell.RIBO',
                        'fourcell.RIBO',
                        'eightcell.RIBO',
                        'omaonecell.RIBO',
                        'omatwocell.RIBO',
                        'omafourcell.RIBO'),times = c(2,4,4,5,3,6,4)  ))

y <- DGEList(counts=adjusted_table_ribo_MDS[,c(2:29)],
             group=exptype, genes = adjusted_table_ribo_MDS[,1])

y <- calcNormFactors(y, method = "TMM")
design <- model.matrix(~0+exptype)
colnames(design) <- levels(exptype)
y <- estimateDisp(y,design)

fit <- glmQLFit(y,design)


my.contrasts <- makeContrasts(
  Ribotwovsone =  twocell.RIBO - onecell.RIBO  ,
  Ribofourvstwo = fourcell.RIBO-twocell.RIBO,
  Riboeightvsfour = eightcell.RIBO-fourcell.RIBO,
  RiboO1vsW1 = omaonecell.RIBO - onecell.RIBO,
  RiboO2vsW2 = omatwocell.RIBO - twocell.RIBO,
  RiboO4vsW4 = omafourcell.RIBO - fourcell.RIBO,
  RiboO2vsO1 = omatwocell.RIBO - omaonecell.RIBO,
  RiboO4vsO2 = omafourcell.RIBO - omatwocell.RIBO,
  levels = design
)

qlf_Ribo_two_vs_one <- glmQLFTest(fit, contrast=my.contrasts[,"Ribotwovsone"])  
qlf_Ribo_four_vs_two <- glmQLFTest(fit, contrast=my.contrasts[,"Ribofourvstwo"]) 
qlf_Ribo_eight_vs_four <- glmQLFTest(fit, contrast=my.contrasts[,"Riboeightvsfour"])  
qlf_Ribo_oma_WT_onecell <- glmQLFTest(fit, contrast=my.contrasts[,"RiboO1vsW1"])  
qlf_Ribo_oma_WT_twocell <- glmQLFTest(fit, contrast=my.contrasts[,"RiboO2vsW2"]) 
qlf_Ribo_oma_WT_fourcell <- glmQLFTest(fit, contrast=my.contrasts[,"RiboO4vsW4"]) 
qlf_Ribo_omatwovsone <-glmQLFTest(fit, contrast=my.contrasts[,"RiboO2vsO1"]) 
qlf_Ribo_omafourvstwo <-glmQLFTest(fit, contrast=my.contrasts[,"RiboO4vsO2"]) 


adjusted_table_RNA_MDS <- adjusted_table_RNA
colnames(adjusted_table_RNA_MDS) <- c("gene_name",
                                        "OMA_1-cell_1.RNA",
                                        "OMA_1-cell_2.RNA",
                                        "OMA_1-cell_3.RNA",
                                        "OMA_2-cell_1.RNA",
                                        "OMA_2-cell_2.RNA",
                                        "OMA_2-cell_3.RNA",
                                        "OMA_4-cell_1.RNA",
                                        "OMA_4-cell_2.RNA",
                                        "OMA_4-cell_3.RNA",
                                        "WT_1-cell_1.RNA",
                                        "WT_1-cell_2.RNA",
                                        "WT_1-cell_3.RNA",
                                        "WT_2-cell_1.RNA",
                                        "WT_2-cell_2.RNA", 
                                        "WT_2-cell_3.RNA",
                                        "WT_4-cell_1.RNA",
                                        "WT_4-cell_2.RNA",
                                        "WT_4-cell_3.RNA",
                                        "WT_8-cell_1.RNA",
                                        "WT_8-cell_2.RNA",
                                        "WT_8-cell_3.RNA")


exptype <- factor(rep(c("omaonecell.RNA",
                        "omatwocell.RNA",
                        "omafourcell.RNA",
                        "onecell.RNA",
                        "twocell.RNA",
                        "fourcell.RNA",
                        "eightcell.RNA"),times = c(3,3,3,3,3,3,3)  ))

y <- DGEList(counts=adjusted_table_RNA_MDS[,c(2:22)],
             group=exptype, genes = adjusted_table_RNA_MDS[,1])

y <- calcNormFactors(y, method = "TMM")
design <- model.matrix(~0+exptype)
colnames(design) <- levels(exptype)
y <- estimateDisp(y, design, trend.method = "loess", robust = TRUE)
fit <- glmQLFit(y,design)

my.contrasts <- makeContrasts(
  RNAtwovsone =  twocell.RNA - onecell.RNA  ,
  RNAfourvstwo = fourcell.RNA-twocell.RNA,
  RNAeightvsfour = eightcell.RNA-fourcell.RNA,
  RNAO1vsW1 = omaonecell.RNA - onecell.RNA,
  RNAO2vsW2 = omatwocell.RNA - twocell.RNA,
  RNAO4vsW4 = omafourcell.RNA - fourcell.RNA,
  RNAO2vsO1 = omatwocell.RNA - omaonecell.RNA,
  RNAO4vsO2 = omafourcell.RNA - omatwocell.RNA,
  levels = design
)


qlf_RNA_two_vs_one <- glmQLFTest(fit, contrast=my.contrasts[,"RNAtwovsone"])  
qlf_RNA_four_vs_two <- glmQLFTest(fit, contrast=my.contrasts[,"RNAfourvstwo"]) 
qlf_RNA_eight_vs_four <- glmQLFTest(fit, contrast=my.contrasts[,"RNAeightvsfour"])  
qlf_RNA_oma_WT_onecell <- glmQLFTest(fit, contrast=my.contrasts[,"RNAO1vsW1"])  
qlf_RNA_oma_WT_twocell <- glmQLFTest(fit, contrast=my.contrasts[,"RNAO2vsW2"]) 
qlf_RNA_oma_WT_fourcell <- glmQLFTest(fit, contrast=my.contrasts[,"RNAO4vsW4"]) 
qlf_RNA_omatwovsone <-glmQLFTest(fit, contrast=my.contrasts[,"RNAO2vsO1"]) 
qlf_RNA_omafourvstwo <-glmQLFTest(fit, contrast=my.contrasts[,"RNAO4vsO2"]) 

#Translational effieciency 

all_together <- merge(adjusted_table_ribo_MDS,adjusted_table_RNA_MDS, by = 'gene_name')

exptype <- factor(rep(c('onecell.RIBO',
                        'twocell.RIBO',
                        'fourcell.RIBO',
                        'eightcell.RIBO',
                        'omaonecell.RIBO',
                        'omatwocell.RIBO',
                        'omafourcell.RIBO',
                        "omaonecell.RNA",
                        "omatwocell.RNA",
                        "omafourcell.RNA",
                        "onecell.RNA",
                        "twocell.RNA",
                        "fourcell.RNA",
                        "eightcell.RNA"),times = c(2,4,4,5,3,6,4,3,3,3,3,3,3,3)))

y <- DGEList(counts=all_together[,c(2:50)],
             group=exptype, genes = all_together[,1])

y <- calcNormFactors(y, method = "TMM")
design <- model.matrix(~0+exptype)
colnames(design) <- levels(exptype)
y <- estimateDisp(y,design)
fit <- glmQLFit(y,design)





my.contrasts <- makeContrasts(
  TEtwovsone =  (twocell.RIBO - onecell.RIBO)- (twocell.RNA - onecell.RNA)  ,
  TEfourvstwo = (fourcell.RIBO-twocell.RIBO)-(fourcell.RNA-twocell.RNA),
  TEeightvsfour = (eightcell.RIBO-fourcell.RIBO)-(eightcell.RNA-fourcell.RNA),
  TEO1vsW1 = (omaonecell.RIBO - onecell.RIBO)- (omaonecell.RNA - onecell.RNA),
  TEO2vsW2 = (omatwocell.RIBO - twocell.RIBO)-(omatwocell.RNA - twocell.RNA),
  TEO4vsW4 = (omafourcell.RIBO - fourcell.RIBO-(omafourcell.RNA - fourcell.RNA)),
  TEO2vsO1 = (omatwocell.RIBO - omaonecell.RIBO)-(omatwocell.RNA - omaonecell.RNA),
  TEO4vsO2 = (omafourcell.RIBO - omatwocell.RIBO)-(omafourcell.RNA - omatwocell.RNA),
  levels = design
)
qlf_TE_two_vs_one <- glmQLFTest(fit, contrast=my.contrasts[,"TEtwovsone"])  
qlf_TE_four_vs_two <- glmQLFTest(fit, contrast=my.contrasts[,"TEfourvstwo"]) 
qlf_TE_eight_vs_four <- glmQLFTest(fit, contrast=my.contrasts[,"TEeightvsfour"]) 
qlf_TE_oma_WT_onecell <- glmQLFTest(fit, contrast=my.contrasts[,"TEO1vsW1"])  
qlf_TE_oma_WT_twocell <- glmQLFTest(fit, contrast=my.contrasts[,"TEO2vsW2"]) 
qlf_TE_oma_WT_fourcell <- glmQLFTest(fit, contrast=my.contrasts[,"TEO4vsW4"]) 
qlf_TE_omatwovsone <-glmQLFTest(fit, contrast=my.contrasts[,"TEO2vsO1"]) 
qlf_TE_omafourvstwo <-glmQLFTest(fit, contrast=my.contrasts[,"TEO4vsO2"]) 
```

### Mean difference plot

First we create a list of all the comparisions we did. We call this the "contrast_list"

```{r}



contrast_list <- list(
  qlf_RNA_two_vs_one = qlf_RNA_two_vs_one,
  qlf_Ribo_two_vs_one = qlf_Ribo_two_vs_one,
  qlf_TE_two_vs_one = qlf_TE_two_vs_one,
  qlf_RNA_four_vs_two = qlf_RNA_four_vs_two,
  qlf_Ribo_four_vs_two = qlf_Ribo_four_vs_two,
  qlf_TE_four_vs_two = qlf_TE_four_vs_two,
  qlf_RNA_eight_vs_four = qlf_RNA_eight_vs_four,
  qlf_Ribo_eight_vs_four = qlf_Ribo_eight_vs_four,
  qlf_TE_eight_vs_four = qlf_TE_eight_vs_four,
  qlf_RNA_oma_WT_onecell = qlf_RNA_oma_WT_onecell,
  qlf_Ribo_oma_WT_onecell = qlf_Ribo_oma_WT_onecell,
  qlf_TE_oma_WT_onecell = qlf_TE_oma_WT_onecell,
  qlf_RNA_oma_WT_twocell = qlf_RNA_oma_WT_twocell,
  qlf_Ribo_oma_WT_twocell = qlf_Ribo_oma_WT_twocell,
  qlf_TE_oma_WT_twocell = qlf_TE_oma_WT_twocell,
  qlf_RNA_oma_WT_fourcell = qlf_RNA_oma_WT_fourcell,
  qlf_Ribo_oma_WT_fourcell = qlf_Ribo_oma_WT_fourcell,
  qlf_TE_oma_WT_fourcell = qlf_TE_oma_WT_fourcell,
  qlf_RNA_omatwovsone = qlf_RNA_omatwovsone,
  qlf_Ribo_omatwovsone = qlf_Ribo_omatwovsone,
  qlf_TE_omatwovsone = qlf_TE_omatwovsone,
  qlf_RNA_omafourvstwo = qlf_RNA_omafourvstwo,
  qlf_Ribo_omafourvstwo = qlf_Ribo_omafourvstwo,
  qlf_TE_omafourvstwo = qlf_TE_omafourvstwo
)
```

```{r}
plot_RNA_2v1 <- create_MD_plot(contrast_list[["qlf_RNA_two_vs_one"]]) +
  labs(subtitle = "RNA Abundance") + 
  my_custom_theme() +
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))
 
plot_Ribo_2v1 <- create_MD_plot(contrast_list[["qlf_Ribo_two_vs_one"]] ) +
  labs(subtitle = "Ribosome Occupancy") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))

plot_TE_2v1 <- create_MD_plot(contrast_list[["qlf_TE_two_vs_one"]]) +
  labs(subtitle = "Translational Efficiency") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))  

plot_RNA_4v2 <- create_MD_plot(contrast_list[["qlf_RNA_four_vs_two"]] ) +
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))+scale_y_continuous(
    limits = c(-10, 10),
    breaks = seq(-8,8, by = 2),
    labels = seq(-8, 8, by = 2),
    expand = c(0, 0)
  ) +
  coord_cartesian(ylim = c(-10, 10))+ annotate("segment", x = 0, xend = 0, y = -8, yend = 8)

plot_Ribo_4v2 <- create_MD_plot(contrast_list[["qlf_Ribo_four_vs_two"]]) +
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))

plot_TE_4v2 <- create_MD_plot(contrast_list[["qlf_TE_four_vs_two"]]) +
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5)) +scale_y_continuous(
    limits = c(-10, 10),
    breaks = seq(-8,8, by = 2),
    labels = seq(-8, 8, by = 2),
    expand = c(0, 0)
  ) +
  coord_cartesian(ylim = c(-10, 10))+ annotate("segment", x = 0, xend = 0, y = -8, yend = 8) 
plot_RNA_8v4 <- create_MD_plot(contrast_list[["qlf_RNA_eight_vs_four"]] ) +
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))+scale_y_continuous(
    limits = c(-10, 10),
    breaks = seq(-4,4, by = 2),
    labels = seq(-4, 4, by = 2),
    expand = c(0, 0)
  ) +
  coord_cartesian(ylim = c(-10, 10))+ annotate("segment", x = 0, xend = 0, y = -4, yend = 4)

plot_Ribo_8v4 <- create_MD_plot(contrast_list[["qlf_Ribo_eight_vs_four"]]) +
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))

plot_TE_8v4 <- create_MD_plot(contrast_list[["qlf_TE_eight_vs_four"]]) +
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5)) +scale_y_continuous(
    limits = c(-10, 10),
    breaks = seq(-4,4, by = 2),
    labels = seq(-4, 4, by = 2),
    expand = c(0, 0)
  ) +
  coord_cartesian(ylim = c(-10, 10))+ annotate("segment", x = 0, xend = 0, y = -4, yend = 4) 

```

We also make the plots with the OMA-1 mutant samples. The key thing being that we highlight the OMA-1 bound transcripts that have been previously identified

```{r}

 plot_RNA_W1vO1 <- create_MD_plot(contrast_list[["qlf_RNA_oma_WT_onecell"]] ) +
  labs(subtitle = "WT vs Zu405 1-cell") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))  
 
 plot_Ribo_W1vO1 <- create_MD_plot(contrast_list[["qlf_Ribo_oma_WT_onecell"]] ) +
  labs(subtitle = "WT vs Zu405 1-cell") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))  
 
 plot_TE_W1vO1 <- create_MD_plot(contrast_list[["qlf_TE_oma_WT_onecell"]] ) +
  labs(subtitle = "WT vs Zu405 1-cell") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))  


 plot_RNA_W2vO2 <- create_MD_plot(contrast_list[["qlf_RNA_oma_WT_twocell"]] ) +
  labs(subtitle =  "WT vs Zu405 2-cell") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_blank() )
 
  plot_Ribo_W2vO2 <- create_MD_plot(contrast_list[["qlf_Ribo_oma_WT_twocell"]] ) +
  labs(subtitle =  "WT vs Zu405 2-cell") + 
  my_custom_theme() + 
theme(plot.subtitle = element_blank() )
 
plot_TE_W2vO2 <- create_MD_plot(contrast_list[["qlf_TE_oma_WT_twocell"]] ) +
  labs(subtitle =  "WT vs Zu405 2-cell") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))  

contrast_data_w2_o2 <- as.data.frame(topTags(contrast_list[["qlf_TE_oma_WT_twocell"]], n = Inf))

# Filter for oma genes that are significantly changed, using the same criteria as in the original function
significant_oma_genes_w2_o2 <- contrast_data_w2_o2 %>%
  filter(gene_name %in% oma$gene_name) %>%
  filter(FDR < 0.2 & (logFC > 1 | logFC < -1))

# Add only the significant oma genes to the plot
# Add only the significant oma genes to the plot
plot_Ribo_W2vO2 <- plot_Ribo_W2vO2  +
  geom_point(data = significant_oma_genes_w2_o2, aes(x = logCPM, y = logFC), 
             color = "darkgreen", size = 0.5, alpha = 1) +
theme(plot.subtitle = element_blank() )

plot_TE_W2vO2_oma <- plot_TE_W2vO2 +
  geom_point(data = significant_oma_genes_w2_o2, aes(x = logCPM, y = logFC), 
             color = "darkgreen", size = 0.5, alpha = 1) +
  theme(plot.caption = element_text(size = 6, hjust = 0))



plot_RNA_W4vO4 <- create_MD_plot(contrast_list[["qlf_RNA_oma_WT_fourcell"]] ) +
  labs(subtitle =  "WT vs Zu405 4-cell") + 
  my_custom_theme() + 
theme(plot.subtitle = element_blank() ) 

plot_Ribo_W4vO4 <- create_MD_plot(contrast_list[["qlf_Ribo_oma_WT_fourcell"]] ) +
  labs(subtitle =  "WT vs Zu405 4-cell") + 
  my_custom_theme() + 
theme(plot.subtitle = element_blank() ) 

plot_TE_W4vO4 <- create_MD_plot(contrast_list[["qlf_TE_oma_WT_fourcell"]] ) +
  labs(subtitle =  "WT vs Zu405 4-cell") + 
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))  

# Extract data from the contrast object
contrast_data <- as.data.frame(topTags(contrast_list[["qlf_TE_oma_WT_fourcell"]], n = Inf))

# Filter for oma genes that are significantly changed, using the same criteria as in the original function
significant_oma_genes <- contrast_data %>%
  filter(gene_name %in% oma$gene_name) %>%
  filter(FDR < 0.2 & (logFC > 1 | logFC < -1))

# Add only the significant oma genes to the plot

plot_Ribo_W4vO4_oma <- plot_Ribo_W4vO4 +
  geom_point(data = significant_oma_genes, aes(x = logCPM, y = logFC), 
             color = "darkgreen", size = 0.5, alpha = 1) +
 theme(plot.subtitle = element_blank() )

plot_TE_W4vO4_oma <- plot_TE_W4vO4 +
  geom_point(data = significant_oma_genes, aes(x = logCPM, y = logFC), 
             color = "darkgreen", size = 0.5, alpha = 1) +
  theme(plot.caption = element_text(size = 6, hjust = 0))



  plot_RNA_O2vO1 <- create_MD_plot(contrast_list[["qlf_RNA_omatwovsone"]] ) +
  labs(subtitle = "2-cell vs 1-cell in Zu405") + 
    ylab("Log2(FC)")+
  my_custom_theme() + 
 theme(plot.subtitle = element_blank() )

  
  plot_Ribo_O2vO1 <- create_MD_plot(contrast_list[["qlf_Ribo_omatwovsone"]] ) +
  labs(subtitle = "2-cell vs 1-cell in Zu405") + 
    ylab("Log2(FC)")+
  my_custom_theme() + 
  theme(plot.subtitle = element_blank() )

  plot_TE_O2vO1 <- create_MD_plot(contrast_list[["qlf_TE_omatwovsone"]] ) +
  labs(subtitle = "2-cell vs 1-cell in Zu405") + 
    ylab("Log2(FC) TE")+
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))  
 

  
    plot_RNA_O4vO2 <- create_MD_plot(contrast_list[["qlf_RNA_omafourvstwo"]] ) +
    ylab("Log2(FC)")+
  my_custom_theme() + 
theme(plot.subtitle = element_blank() )
    
    
    plot_Ribo_O4vO2 <- create_MD_plot(contrast_list[["qlf_Ribo_omafourvstwo"]] ) +
    ylab("Log2(FC)")+
  my_custom_theme() + 
theme(plot.subtitle = element_blank() )
    

  plot_TE_O4vO2 <- create_MD_plot(contrast_list[["qlf_TE_omafourvstwo"]] ) +
  labs(subtitle = "4-cell vs 2-cell in Zu405") + 
    ylab("Log2(FC) TE")+
  my_custom_theme() + 
  theme(plot.subtitle = element_text(size = unit(8, 'pt'), hjust = 0.5))
```

# Contribution to logFC in TE by Ribosome Occupancy vs RNA abundance

```{r}

output_list <- list()

for (i in seq_along(contrast_list)) {
  contrast <- contrast_list[[i]]
  
  top <- topTags(contrast, n = Inf)
  output <- as.data.table(top$table)
  
  # Add the output to the list with the same name as the contrast
  output_list[[i]] <- output
  
  # Assign the name of the contrast_list element to the output_list element
  names(output_list)[i] <- names(contrast_list)[i]
}
#TWO-CELLL vs ONE-CELL
twovsone_ribo_table <- output_list[["qlf_Ribo_two_vs_one"]] 
colnames(twovsone_ribo_table) <- c("gene_name" ,"ribo_logFC" ,    "logCPM"  ,  "F",         "PValue", "FDR" )
twovsone_ribo_table <- twovsone_ribo_table[,c(1:2)]

twovsone_RNA_table <- output_list[["qlf_RNA_two_vs_one"]] 
colnames(twovsone_RNA_table) <- c("gene_name" ,"RNA_logFC" ,    "logCPM"  ,  "F",         "PValue", "FDR" )
twovsone_RNA_table <- twovsone_RNA_table[,c(1:2)]

significant_TE_change <- output_list[["qlf_TE_two_vs_one"]] |> filter(FDR <0.2) |> filter(logFC > 1 | logFC < -1) |> dplyr::select(gene_name,logFC) |> dplyr::rename(logFC_TE = logFC )

Ribo_vs_RNA_one_to_two <- merge(twovsone_ribo_table,significant_TE_change, by = "gene_name")

Ribo_vs_RNA_one_to_two <- merge(Ribo_vs_RNA_one_to_two, twovsone_RNA_table, by = "gene_name") 



Ribo_vs_RNA_one_to_two_plot<-ggplot(Ribo_vs_RNA_one_to_two, aes(x = RNA_logFC, y = ribo_logFC, color = logFC_TE)) + 
  geom_jitter(size =1 ) +  
  theme_cowplot() +
  scale_x_continuous(limits = c(-6,6), n.breaks = 8) +
  scale_y_continuous(limits = c(-6,6), n.breaks = 8) +
  theme(panel.grid.major.y = element_line(color = "grey", size = 0.5, linetype = 1)) + 
  labs(x = "Log2FC (RNA abundance)",
       y = "Log2FC (Ribosome Occupancy)") +
   scale_color_gradient2(
    low = "blue",
    mid = "white",
    high = "red",
    midpoint = 0,
    limits = c(-10, 10),
    space = "Lab",
    name = "Log2FC (TE)"
  ) + 
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
  geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
  my_custom_theme()+ labs(subtitle = "2-cell vs 1-cell") + theme(plot.subtitle = element_text(size = unit(8,'pt')))




```

```{r}

#FOUR_CELL VS TWO_CELL
fourvstwo_ribo_table <- output_list[["qlf_Ribo_four_vs_two"]] 
colnames(fourvstwo_ribo_table) <- c("gene_name" ,"ribo_logFC" ,    "logCPM"  ,  "F",         "PValue", "FDR" )
fourvstwo_ribo_table <- fourvstwo_ribo_table[,c(1:2)]

fourvstwo_RNA_table <- output_list[["qlf_RNA_four_vs_two"]] 
colnames(fourvstwo_RNA_table) <- c("gene_name" ,"RNA_logFC" ,    "logCPM"  ,  "F",         "PValue", "FDR" )
fourvstwo_RNA_table <- fourvstwo_RNA_table[,c(1:2)]

significant_TE_change <- output_list[["qlf_TE_four_vs_two"]] |> filter(FDR <0.2) |> filter(logFC > 1 | logFC < -1) |>  dplyr::select(gene_name,logFC) |>  dplyr::rename(logFC_TE = logFC ) 

Ribo_vs_RNA_four_to_two <- merge(fourvstwo_ribo_table,fourvstwo_RNA_table, by = "gene_name")

Ribo_vs_RNA_four_to_two <- merge(Ribo_vs_RNA_four_to_two,significant_TE_change, by = "gene_name")


Ribo_vs_RNA_four_to_two_plot<-ggplot(Ribo_vs_RNA_four_to_two, aes(x = RNA_logFC, y = ribo_logFC, color = logFC_TE))+ 
  geom_jitter(size = 1) +  
  theme_cowplot() +
  scale_x_continuous(limits = c(-5,5), n.breaks = 8)+
  scale_y_continuous(limits = c(-5,5), n.breaks = 8)+
  theme(panel.grid.major.y = element_line(color = "grey", size = 0.5, linetype = 1)) + 
  labs(x = "Log2FC (RNA abundance)",
       y= "Log2FC (Ribosome Occupancy)")+
  scale_color_gradient2(
    low = "blue",
    mid = "white",
    high = "red",
    midpoint = 0,
    limits = c(-8, 8),
    space = "Lab",
    name = "Log2FC (TE)"
  )+ theme(axis.text = element_text(size =16))+ 
  geom_hline(yintercept = 0, linetype = "dotted", color = "black") +
  geom_vline(xintercept = 0, linetype = "dotted", color = "black") +
  my_custom_theme()+labs(subtitle = "4-cell vs 2-cell") + theme(plot.subtitle = element_text(size = unit(8,'pt')))




```

# Comparing logFC between WT and OMA-1 mutant

We would like to see the difference in the change in WT and OMA-1. We compare the change across:

-   1-cell to 2-cell

-   2-cell to 4-cell

```{r}

#1-cell VS 2-cell 

data_WT <- "qlf_TE_two_vs_one"
data_OMA <- "qlf_TE_omatwovsone"

# Process WT data
table_2vs1_WT <- as.data.table(output_list[[data_WT]]) 
# Get significant genes in WT
significant_genes_WT <- table_2vs1_WT[FDR < 0.2, gene_name]
logFC_table_2vs1_WT <- table_2vs1_WT[,.(gene_name,logFC)] 
colnames(logFC_table_2vs1_WT) <- c("gene_name","logFC_WT")

# Process OMA data
table_2vs1_OMA <- as.data.table(output_list[[data_OMA]])
# Get significant genes in OMA
significant_genes_OMA <- table_2vs1_OMA[FDR < 0.2, gene_name]

# Get all significant genes (union of both sets)
all_significant_genes <- unique(c(significant_genes_WT, significant_genes_OMA))

logFC_table_2vs1_OMA <- table_2vs1_OMA[,.(gene_name,logFC)]
colnames(logFC_table_2vs1_OMA) <- c("gene_name","logFC_OMA")

# Merge the tables and filter for significant genes
plot_table_logFC <- merge(logFC_table_2vs1_WT, logFC_table_2vs1_OMA, by = 'gene_name') %>%
  filter(gene_name %in% all_significant_genes)
significant_oma_genes_2_cell <-merge(plot_table_logFC, oma , by = "gene_name")
# Create the plot
plot_table_logFC_2v1 <- ggplot(plot_table_logFC, aes(x=logFC_WT, y=logFC_OMA)) +
    geom_quadrant_lines(linetype = "dotted") +
    geom_point(alpha = 0.5, color = BURNT_ORANGE, size = 1.5, stroke = 0) +
    scale_x_continuous(limits = c(-10,10)) +
    scale_y_continuous(limits = c(-10,10)) +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
    labs(subtitle = "2-cell vs 1-cell",
         y = "Mutant fold change (Log2FC)",
         x = "Wild-type fold change (Log2FC)") + 
    my_custom_theme() +
    theme(plot.subtitle = element_text(hjust = 0.5))


plot_table_logFC_2v1_bound  <- plot_table_logFC_2v1 +
    geom_point(data = significant_oma_genes_2_cell , aes(x = logFC_WT, y = logFC_OMA), 
               color= "darkgreen", size = 1.5, alpha = 1, stroke = 0)
```

```{r}
data_WT <- "qlf_TE_four_vs_two"
data_OMA <- "qlf_TE_omafourvstwo"

# Process WT data
table_4vs2_WT <- as.data.table(output_list[[data_WT]]) 
# Get significant genes in WT
significant_genes_WT <- table_4vs2_WT[FDR < 0.2, gene_name]
logFC_table_4vs2_WT <- table_4vs2_WT[,.(gene_name,logFC)] 
colnames(logFC_table_4vs2_WT) <- c("gene_name","logFC_WT")

# Process OMA data
table_4vs2_OMA <- as.data.table(output_list[[data_OMA]])
# Get significant genes in OMA
significant_genes_OMA <- table_4vs2_OMA[FDR < 0.2, gene_name]

# Get all significant genes (union of both sets)
all_significant_genes <- unique(c(significant_genes_WT, significant_genes_OMA))

logFC_table_4vs2_OMA <- table_4vs2_OMA[,.(gene_name,logFC)]
colnames(logFC_table_4vs2_OMA) <- c("gene_name","logFC_OMA")

# Merge the tables and filter for significant genes
plot_table_logFC <- merge(logFC_table_4vs2_WT, logFC_table_4vs2_OMA, by = 'gene_name') %>%
  filter(gene_name %in% all_significant_genes)

# Get OMA-specific genes if needed
significant_oma_genes <- plot_table_logFC %>%
    filter(gene_name %in% oma$gene_name)
significant_oma_genes_4_cell <-merge(plot_table_logFC, oma , by = "gene_name")
# Create the plot
plot_table_logFC_4v2 <- ggplot(plot_table_logFC, aes(x=logFC_WT, y=logFC_OMA)) +
    geom_quadrant_lines(linetype = "dotted") +
    geom_point(alpha = 0.5, color = BURNT_ORANGE, size = 1.5, stroke = 0) +
    scale_x_continuous(limits = c(-10,10)) +
    scale_y_continuous(limits = c(-10,10)) +
    geom_abline(slope = 1, intercept = 0, linetype = "dashed", color = "red") +
    labs(subtitle = "4-cell vs 2-cell",
         y = "Mutant fold change (Log2FC)",
         x = "Wild-type fold change (Log2FC)") + 
    my_custom_theme() +
    theme(plot.subtitle = element_text(hjust = 0.5))


plot_table_logFC_4v2_OMA_change_bound  <- plot_table_logFC_4v2  +
    geom_point(data = significant_oma_genes_4_cell , aes(x = logFC_WT, y = logFC_OMA), 
               color = "darkgreen", size = 1.5, alpha = 1,stroke = 0)+  geom_point(data = significant_oma_genes_4_cell , aes(x = logFC_WT, y = logFC_OMA), 
               color = "darkgreen", size = 1, alpha = 1,stroke = 0)
```

# Normalised TE - analysis

Uptil now we have compared logFC between stages but we would like to identify the relative TE level of each gene within a stage. To this end we use the propr package to obtain the Normalized TE values. We do this by obtain the log-centered ratio for each gene.

```{r}

clr_transformed_data <- apply_robust_clr(all_counts) 

averaged_clr_data <- data.frame(
  gene_name = clr_transformed_data$gene_name,
  one_cell.ribo = rowMeans(clr_transformed_data[, c("one_cell_B7_1.RIBO", "one_cell_B10_2.RIBO")]),
  two_cell.ribo = rowMeans(clr_transformed_data[, c("two_cell_B1_1.RIBO", "two_cell_B2_2.RIBO", "two_cell_B3_3.RIBO", "two_cell_B7_4.RIBO")]),
  four_cell.ribo = rowMeans(clr_transformed_data[, c("four_cell_B2_1.RIBO", "four_cell_B3_2.RIBO", "four_cell_B3_3.RIBO", "four_cell_B7_4.RIBO")]),
  eight_cell.ribo = rowMeans(clr_transformed_data[, c("eight_cell_B3_1.RIBO", "eight_cell_B7_2.RIBO", "eight_cell_B8_3.RIBO", "eight_cell_B9_4.RIBO", "eight_cell_B10_5.RIBO")]),
  one_cell.rna = rowMeans(clr_transformed_data[, c("WT_1cell_B11_1.RNA", "WT_1cell_B12_2.RNA", "WT_1cell_B12_3.RNA")]),
  two_cell.rna = rowMeans(clr_transformed_data[, c("WT_2cell_B11_1.RNA", "WT_2cell_B12_2.RNA", "WT_2cell_B12_3.RNA")]),
  four_cell.rna = rowMeans(clr_transformed_data[, c("WT_4cell_B11_1.RNA", "WT_4cell_B12_2.RNA", "WT_4cell_B12_3.RNA")]),
  eight_cell.rna = rowMeans(clr_transformed_data[, c("WT_8cell_B11_1.RNA", "WT_8cell_B12_2.RNA", "WT_8cell_B12_3.RNA")]),
  oma_one_cell.ribo = rowMeans(clr_transformed_data[, c("oma_1_1cell_B6_1.RIBO", "oma_1_1cell_B10_2.RIBO", "oma_1_1cell_B10_3.RIBO")]),
  oma_two_cell.ribo = rowMeans(clr_transformed_data[, c("oma_1_2cell_B4_1.RIBO", "oma_1_2cell_B5_2.RIBO", "oma_1_2cell_B6_3.RIBO", "oma_1_2cell_B10_4.RIBO", "oma_1_2cell_B8_5.RIBO", "oma_1_2cell_B9_6.RIBO")]),
  oma_four_cell.ribo = rowMeans(clr_transformed_data[, c("oma_1_4cell_B4_1.RIBO", "oma_1_4cell_B5_2.RIBO", "oma_1_4cell_B6_3.RIBO", "oma_1_4cell_B9_4.RIBO")]),
  oma_one_cell.rna = rowMeans(clr_transformed_data[, c("OMA_1cell_B11_1.RNA", "OMA_1cell_B12_2.RNA", "OMA_1cell_B12_3.RNA")]),
  oma_two_cell.rna = rowMeans(clr_transformed_data[, c("OMA_2cell_B11_1.RNA", "OMA_2cell_B12_2.RNA", "OMA_2cell_B12_3.RNA")]),
  oma_four_cell.rna = rowMeans(clr_transformed_data[, c("OMA_4cell_B11_1.RNA", "OMA_4cell_B12_1.RNA", "OMA_4cell_B12_2.RNA")])
)

averaged_clr_TE <- averaged_clr_data %>%
  mutate(
    WT_one_cell_TE = one_cell.ribo - one_cell.rna,
    WT_two_cell_TE = two_cell.ribo - two_cell.rna,
    WT_four_cell_TE = four_cell.ribo - four_cell.rna,
    WT_eight_cell_TE = eight_cell.ribo - eight_cell.rna,
    oma_one_cell_TE = oma_one_cell.ribo - oma_one_cell.rna,
    oma_two_cell_TE = oma_two_cell.ribo - oma_two_cell.rna,
    oma_four_cell_TE = oma_four_cell.ribo - oma_four_cell.rna
  ) %>%
  dplyr::select(gene_name, WT_one_cell_TE, WT_two_cell_TE, WT_four_cell_TE, WT_eight_cell_TE,
         oma_one_cell_TE, oma_two_cell_TE, oma_four_cell_TE) 
# Reshape the data for plotting
averaged_clr_data_long <- averaged_clr_TE  %>%
  pivot_longer(-gene_name, names_to = "condition", values_to = "CLR")

# Create histograms
TE_distrubution <- ggplot(averaged_clr_data_long, aes(x = CLR, fill = condition)) +
  geom_histogram(bins = 50, alpha = 0.7, position = "identity") +
  facet_wrap(~condition, scales = "free_y") +
  theme_minimal() +
  labs(title = "Histograms of Averaged CLR Values Across Conditions",
       x = "CLR Value", y = "Count") +
  theme(legend.position = "none")

averaged_clr_TE_zscored <- averaged_clr_TE %>%
  mutate(across(-gene_name, ~{
    if(var(., na.rm = TRUE) > 0) {
      (. - mean(., na.rm = TRUE)) / sd(., na.rm = TRUE)
    } else {
      rep(0, length(.))
    }
  }))

```

## Examples from previous publications

```{r}
plot_table <-  as.data.frame(averaged_clr_TE)

plot_table_long <-  pivot_longer(plot_table, 
                        cols = -gene_name, # Select all columns except gene_name for pivoting
                        names_to = "cell_stage", 
                        values_to = "TE")
plot_table_long$cell_stage <- factor(plot_table_long$cell_stage,c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE","oma_one_cell_TE","oma_two_cell_TE","oma_four_cell_TE"))

target_gene <- c("gpd-4","pal-1","mom-2","neg-1","nos-2","cam-1","lag-1")


gene_to_plot <- plot_table_long |> filter(gene_name %in% target_gene ) |> filter(cell_stage %in%c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))

example_from_publication<- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-5, 5)) +
  labs(y = "Normalized Translational Efficiency", x = "") +
scale_color_viridis_d() +   scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell", 
                              "WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +  geom_label_repel(data = gene_to_plot %>%
                          filter(cell_stage == 'WT_eight_cell_TE'),
                          aes(x = cell_stage, y = TE, label = gene_name),
                          nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, label.size = NA, show.legend = F) +my_custom_theme() + theme(legend.position = 'none')


```

## Nucleoporin examples

```{r}
target_gene <- c("npp-1","npp-11","npp-13","npp-14","npp-15","npp-16","npp-18","npp-20","npp-22","npp-24","npp-3","npp-5","npp-7","npp-8")

gene_to_plot <- plot_table_long |> filter(gene_name %in% target_gene ) |> filter(cell_stage %in%c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))
nucleoporin <- ggpubr::ggline(gene_to_plot, x = 'cell_stage', y = 'TE', color = 'gene_name', size = 1, ylim = c(-4.5, 4.5)) +
  labs(y = "Normalized Translational Efficiency", x = "") +
  scale_color_viridis_d() +   
  scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", 
                             "WT_two_cell_TE" = "2-cell", 
                             "WT_four_cell_TE" = "4-cell", 
                             "WT_eight_cell_TE" = "8-cell")) +  
  geom_label_repel(data = gene_to_plot %>%
                     filter(cell_stage == 'WT_eight_cell_TE'),
                   aes(x = cell_stage, y = TE, label = gene_name),
                   nudge_x = 0.25,          # Increased nudge to the right
                   direction = "y",          # Only allow vertical movement
                   hjust = 0,               # Left-align text in labels
                   segment.size = 0.5,      # Optional: adjust line thickness
                   force = 2,               # Optional: increase repulsion force
                   inherit.aes = FALSE, 
                   na.rm = FALSE, 
                   size = 2, 
                   label.size = NA, 
                   show.legend = F, 
                   max.overlaps = 100) +
  my_custom_theme() + 
  theme(legend.position = 'none')


```

## P-granule vs Cell periphery

```{r}
target_gene_periphery <- c("erm-1","lem-3","ape-1","tes-1", "frm-7","frm-4", "ani-1")

target_gene_granule <-c("chs-1","clu-1","ipgm-1","puf-3","cpg-2","nos-2","wsp-1","dyn-1","exoc-8","unc-112")

gene_to_plot <- plot_table_long %>%
  filter(gene_name %in% c(target_gene_periphery, target_gene_granule)) %>%
  filter(cell_stage %in% c("WT_one_cell_TE", "WT_two_cell_TE", "WT_four_cell_TE", "WT_eight_cell_TE"))

# Create a new column for the group (Periphery or P-granules)
gene_to_plot$group <- ifelse(gene_to_plot$gene_name %in% target_gene_periphery, "Periphery", "P-granules")

# Base plot with updated gene_to_plot
p <- ggplot(gene_to_plot, aes(x = cell_stage, y = TE, color = group, group = gene_name)) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(y = "Normalized Translational Efficiency", x = "", color = "") +
  geom_line(data = plot_table_long %>% 
            filter(gene_name == "gpd-1") %>% 
            filter(cell_stage %in% c("WT_one_cell_TE", "WT_two_cell_TE", "WT_four_cell_TE", "WT_eight_cell_TE")),
            aes(x = cell_stage, y = TE, group = gene_name),
            color = "black", linetype = "dashed", linewidth = 1) +
  geom_point(data = plot_table_long %>% 
             filter(gene_name == "gpd-1") %>% 
             filter(cell_stage %in% c("WT_one_cell_TE", "WT_two_cell_TE", "WT_four_cell_TE", "WT_eight_cell_TE")),
             aes(x = cell_stage, y = TE),
             color = "black", size = 2) +
  scale_color_manual(values = c("Periphery" = UT_BLUE, "P-granules" = BURNT_ORANGE)) +
  scale_x_discrete(labels = c("WT_one_cell_TE" = "1-cell", "WT_two_cell_TE" = "2-cell", 
                              "WT_four_cell_TE" = "4-cell", "WT_eight_cell_TE" = "8-cell")) +
  my_custom_theme() +
  theme(legend.position = "top",
        legend.box = "vertical")

# Add labels for the gene names at the 'WT_eight_cell_TE' stage
p <- p + geom_label_repel(data = gene_to_plot %>%
                          filter(cell_stage == 'WT_eight_cell_TE'),
                          aes(x = cell_stage, y = TE, label = gene_name, color = group),
                          nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE, size = 2, label.size = NA, show.legend = F, max.overlaps = 20) +
  geom_label_repel(data = plot_table_long %>%
                   filter(gene_name == "gpd-1") %>%
                   filter(cell_stage %in% c("WT_eight_cell_TE")),
                   aes(x = cell_stage, y = TE, label = gene_name),
                   nudge_x = 0.1, inherit.aes = FALSE, na.rm = FALSE,
                   size = 2, label.size = NA, color = "black", show.legend = F)

# Adjust plot parameters and legend
localization_of_mrna <- p + 
  ylim(c(-5, 5)) +
  guides(color = guide_legend(override.aes = list(shape = NA, linetype = 1, size = 8)))+ theme(legend.position = "top",
        legend.justification = "center")


```

## Somatic vs Germline comparison

```{r}
plot_table <-  as.data.frame(averaged_clr_TE)

plot_table_long <-  pivot_longer(plot_table, 
                        cols = -gene_name, # Select all columns except gene_name for pivoting
                        names_to = "stage", 
                        values_to = "TE_value") 
plot_table_long$stage <- factor(plot_table_long$stage,c("WT_one_cell_TE","WT_two_cell_TE","WT_four_cell_TE","WT_eight_cell_TE"))

two_cell_somatic_vs_germline <- read_csv("/Users/yashshukla/Documents/Computational/data/2_cell_somatic_vs_germline.csv")

four_cell_somatic_vs_germline  <- read_csv("/Users/yashshukla/Documents/Computational/data/4_cell_somatic_vs_germline.csv")

eight_cell_somatic_vs_germline  <- read_csv("/Users/yashshukla/Documents/Computational/data/8_cell_somatic_vs_germline.csv")

two_cell_somatic_list <- two_cell_somatic_vs_germline |> filter(`P-value` < 0.1) |> filter(logFC > 1.5) |> filter(logCPM >4) |> dplyr::select("gene_name") 

two_cell_germline_list <- two_cell_somatic_vs_germline |> filter(`P-value` < 0.4) |> filter(logFC < -1.5) |> filter(logCPM >4) |> dplyr::select("gene_name")

two_cell_even_list <- two_cell_somatic_vs_germline |> filter(`P-value` > 0.2) |> filter(logFC > - 1 & logFC < 1) |> filter(logCPM >4) |> dplyr::select("gene_name")



four_cell_somatic_list <- four_cell_somatic_vs_germline |> filter(`P-value` < 0.1) |> filter(logFC > 1.5) |> filter(logCPM >4) |> dplyr::select("gene_name") 

four_cell_germline_list <- four_cell_somatic_vs_germline |> filter(`P-value` < 0.1) |> filter(logFC < -1.5) |> filter(logCPM >4) |> dplyr::select("gene_name")

four_cell_even_list <- four_cell_somatic_vs_germline |> filter(`P-value` > 0.2) |> filter(logFC > - 1 & logFC < 1) |> filter(logCPM >4) |> dplyr::select("gene_name")


eight_cell_somatic_list <- eight_cell_somatic_vs_germline |> filter(`P-value` < 0.1) |> filter(logFC > 1.5) |> filter(logCPM >4) |> dplyr::select("gene_name") 

eight_cell_germline_list <- eight_cell_somatic_vs_germline |> filter(`P-value` < 0.1) |> filter(logFC < -1.5) |> filter(logCPM >4) |> dplyr::select("gene_name")

eight_cell_even_list <- eight_cell_somatic_vs_germline |> filter(`P-value` > 0.2) |> filter(logFC > - 1 & logFC < 1) |> filter(logCPM >4) |> dplyr::select("gene_name")

one_cell_somatic <- plot_table_long|> filter(stage == "WT_one_cell_TE") |> merge(two_cell_somatic_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "somatic")

one_cell_germline <- plot_table_long|> filter(stage == "WT_one_cell_TE") |> merge(two_cell_germline_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "germline")

one_cell_even <- plot_table_long|> filter(stage == "WT_one_cell_TE") |> merge(two_cell_even_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "even")

two_cell_somatic <- plot_table_long|> filter(stage == "WT_two_cell_TE") |> merge(two_cell_somatic_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "somatic")

two_cell_germline <- plot_table_long|> filter(stage == "WT_two_cell_TE") |> merge(two_cell_germline_list ,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "germline")

two_cell_even <- plot_table_long|> filter(stage == "WT_two_cell_TE") |> merge(two_cell_even_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "even")




four_cell_somatic <- plot_table_long|> filter(stage == "WT_four_cell_TE") |> merge(four_cell_somatic_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "somatic")

four_cell_germline <- plot_table_long|> filter(stage == "WT_four_cell_TE") |> merge(four_cell_germline_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "germline")


four_cell_even <- plot_table_long|> filter(stage == "WT_four_cell_TE") |> merge(four_cell_even_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "even")

eight_cell_somatic <- plot_table_long|> filter(stage == "WT_eight_cell_TE") |> merge(eight_cell_somatic_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "somatic")

eight_cell_germline <- plot_table_long|> filter(stage == "WT_eight_cell_TE") |> merge(eight_cell_germline_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "germline")


eight_cell_even <- plot_table_long|> filter(stage == "WT_eight_cell_TE") |> merge(eight_cell_even_list,by= "gene_name") |> dplyr::select(c('gene_name','stage','TE_value')) |> mutate(cell_type = "even")


plot_dataset <- rbind(one_cell_somatic,
                      one_cell_germline,
                      one_cell_even,
                      two_cell_somatic,
                      two_cell_germline,
                      two_cell_even,
                      four_cell_somatic,
                      four_cell_germline,
                      four_cell_even,
                      eight_cell_somatic,
                      eight_cell_germline,
                      eight_cell_even)

plot_dataset$cell_type <- factor(plot_dataset$cell_type,c("somatic","germline","even"))
plot_dataset <- plot_dataset |> filter(!stage %in% 	
c("WT_one_cell_TE"))



somatic_vs_germline_TE <- ggviolin(
  plot_dataset, 
  x = "stage", 
  y = "TE_value", 
  fill = "cell_type",
  color = "cell_type",  # This maps the outline color to cell_type
  add = c("median_q1q3"),
  add.params = list(size = 0.2)
) + 
  grids() +
  labs(x="", y="Normalized Translational Efficiency", fill="Enrichment in precusor:") +
  scale_fill_manual(values = c(
    "somatic" = "#005f86", 
    "germline" = "#bf5700", 
    "even" = alpha("grey95", 0.7)  # Very light grey with some transparency
  )) +
  scale_color_manual(values = c(
    "somatic" = "black", 
    "germline" = "black", 
    "even" = "grey70"  # Light grey for the outline of "even"
  ), guide = "none") +  # This removes the color legend
  scale_x_discrete(labels=c("2-cell", "4-cell", "8-cell")) +
  my_custom_theme() +
  theme(
    legend.position = "top", 
    legend.justification = 'center',
    legend.text = element_text(size = unit(8,"pt")), 
    legend.title = element_text(size = unit(8,'pt')), 
    legend.key.size = unit(8,'pt')
  )

```

# Effects of RNA-binding proteins

We obtained the UTR3 of all the genes by using the Bam and bed reference file. Using a python script (code snipet by Ian Hoskins from Can Cenik Lab) we got a ".fa" file which we store in the variable UTR3_all.

```{r}
UTR3_all <- rownames_to_column( as.data.frame(Biostrings::readRNAStringSet("./input_data/UTR3_list.fa", format="fasta", use.names=TRUE)))
UTR3_all$gene_name <- sapply(strsplit(UTR3_all$rowname, "\\|"), function(x) {
  # Find the part that starts with "gene_symbol"
  gene_symbol_part <- grep("gene_symbol:", x, value = TRUE)
  if (length(gene_symbol_part) > 0) {
    # Adjust the regex to continue capturing after the first dot or underscore until it hits a non-alphanumeric character or colon
    gene_symbol_name <- gsub("gene_symbol:([a-zA-Z0-9_.-]+).*", "\\1", gene_symbol_part)
    return(gene_symbol_name)
  }
  return(NA) # Return NA if no gene_symbol is found
})

# Previously identified motifs from literature 

motif_pattern_pos_1 <- "UAU{2,3}[AG][AGU][AGUC]{1,3}G"
motif_pattern_mex_3 <- "[AGU][GU]AG[AGUC]{0,8}U[UAC]UA"
motif_pattern_gld_1 <-"[AGUC]ACU[CA]A[CU]"
motif_pattern_lin_41 <-"[G|C][U|C][A|U][A|U]A[A|G][C|G]"

UTR3_all$motif_count_pos_1 <- sapply(UTR3_all$x, function(seq) {
  sum(str_count(seq, motif_pattern_pos_1))
})
UTR3_all$motif_count_mex_3 <- sapply(UTR3_all$x, function(seq) {
  sum(str_count(seq, motif_pattern_mex_3))
})

UTR3_all$motif_count_gld_1 <- sapply(UTR3_all$x, function(seq) {
  sum(str_count(seq, motif_pattern_gld_1))
})

UTR3_all$motif_count_lin_41 <- sapply(UTR3_all$x, function(seq) {
  sum(str_count(seq, motif_pattern_lin_41))
})


UTR3_all<- UTR3_all |> dplyr::select(!x) |> dplyr::select(!rowname)
 
UTR3_all$oma_pull_down <- ifelse(UTR3_all$gene_name %in% oma$gene_name, 1, 0)


```

We also use GLD-1 data but first we must convert the gene names

```{r}

ensembl <- useMart("ensembl", dataset = "celegans_gene_ensembl")
ensembl <- useMart(biomart = "ENSEMBL_MART_ENSEMBL", 
                   host = "nov2020.archive.ensembl.org", 
                   dataset = "celegans_gene_ensembl")
att <- listAttributes(ensembl)
results <- getBM(attributes = c('external_gene_name','wormbase_transcript'), 
                 mart = ensembl)
results <- results |> mutate(wormbase_transcript =  gsub("([a-zA-Z]?\\.\\d)$", "", wormbase_transcript))

Wright_et_al_2011 <- readxl::read_xls("./input_data/embj2010334-sup-0001.xls")
colnames(Wright_et_al_2011)[1] <- "wormbase_transcript"
gld_pulldown <- Wright_et_al_2011 |> dplyr::filter(IP_AVG > 2) |> dplyr::select(wormbase_transcript)
gld_pulldown <- merge(gld_pulldown,results, by = "wormbase_transcript")
gld_pulldown <- unique(gld_pulldown)

UTR3_all$gld_pulldown <- ifelse(UTR3_all$gene_name %in% gld_pulldown$external_gene_name, 1, 0)
```

We create a linear model to assess the effects of the presence of RNA-binding motifs or pull-down with RNA-binding proteins

```{r}
 UTR3_all[, -1] <- as.data.frame(lapply( UTR3_all[, -1], function(x) as.integer(x > 0)))

TE_binary <- as.data.frame(UTR3_all)
TE_binary[, -1] <- lapply(TE_binary[, -1], function(x) as.integer(x > 0))
 
TE_UTR3 <- merge(averaged_clr_TE,TE_binary, by = 'gene_name')

model_one_cell <- lm(WT_one_cell_TE ~ oma_pull_down+motif_count_pos_1+motif_count_mex_3+motif_count_gld_1+motif_count_lin_41+gld_pulldown, data=TE_UTR3)
model_two_cell <- lm(WT_two_cell_TE ~ oma_pull_down+motif_count_pos_1+motif_count_mex_3+motif_count_gld_1+motif_count_lin_41+gld_pulldown, data=TE_UTR3)
model_four_cell <- lm(WT_four_cell_TE ~ oma_pull_down+motif_count_pos_1+motif_count_mex_3+motif_count_gld_1+motif_count_lin_41+gld_pulldown, data=TE_UTR3)
model_eight_cell <- lm(WT_four_cell_TE ~ oma_pull_down+motif_count_pos_1+motif_count_mex_3+motif_count_gld_1+motif_count_lin_41+gld_pulldown, data=TE_UTR3)

#Model result is provided below

linear_model_one_cell <- summary(model_one_cell)
linear_model_two_cell <- summary(model_two_cell)
linear_model_four_cell <- summary(model_four_cell)
linear_model_eight_cell <- summary(model_eight_cell)


```

To visualize the role of each we present them as violin plots.

```{r}

plot_table <- as.data.frame(TE_UTR3)
# Reshape the data from wide to long format
plot_table_long <- pivot_longer(plot_table, 
                                cols = c("WT_one_cell_TE", "WT_two_cell_TE", "WT_four_cell_TE", "WT_eight_cell_TE"),
                                names_to = "stage", 
                                values_to = "TE_value")


# Set the correct order of stages
plot_table_long$stage <- factor(plot_table_long$stage,
                                levels = c("WT_one_cell_TE", "WT_two_cell_TE", "WT_four_cell_TE", "WT_eight_cell_TE"))


# OMA-1 Violin plot 
gene_TE_graph <- plot_table_long %>%
  mutate(gene_binding = if_else(get("oma_pull_down") > 0, "bound", "unbound"))
# Create the plot
OMA_1_pull_down <- ggviolin(
  gene_TE_graph,
  x = "stage",
  y = "TE_value",
  fill = "gene_binding",
  add = "median_q1q3",
  add.params = list(size = 0.2),
  width = 0.7,
  position = position_dodge(0.9)
) +
  labs(
    y = "Normalized Translational Efficiency",
    fill =  "OMA-1 pull-down"
  ) +
  scale_x_discrete(labels = c("1-cell", "2-cell", "4-cell", "8-cell")) +
  scale_fill_manual(values = c("bound" = "#B6FC9D", "unbound" = "white")) +
  theme_pubr() +
  theme(
    legend.position = 'top',
    legend.justification = 'center'
  ) +
  geom_vline(xintercept = seq(1.5, 3.5, by = 1), linetype = "dashed", color = "gray50", size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey", size = 0.5)

#GLD-1 pull-down
gene_TE_graph <- plot_table_long %>%
  mutate(gene_binding = if_else(get("gld_pulldown") > 0, "bound", "unbound"))
# Create the plot
gld_1_pull_down <- ggviolin(
  gene_TE_graph,
  x = "stage",
  y = "TE_value",
  fill = "gene_binding",
  add = "median_q1q3",
  add.params = list(size = 0.2),
  width = 0.7,
  position = position_dodge(0.9)
) +
  labs(
    y = "Normalized Translational Efficiency",
    fill = "GLD-1 pull-down"
  ) +
  scale_x_discrete(labels = c("1-cell", "2-cell", "4-cell", "8-cell")) +
  scale_fill_manual(values = c("bound" = "#B6FC9D", "unbound" = "white")) +
  theme_pubr() +
  theme(
    legend.position = 'top',
    legend.justification = 'center'
  ) +
  geom_vline(xintercept = seq(1.5, 3.5, by = 1), linetype = "dashed", color = "gray50", size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey", size = 0.5)


#GLD-1 motif
gene_TE_graph <- plot_table_long %>%
  mutate(gene_binding = if_else(get("motif_count_gld_1") > 0, "present", "absent"))
# Create the plot
gld_1_motif_plot <- ggviolin(
  gene_TE_graph,
  x = "stage",
  y = "TE_value",
  fill = "gene_binding",
  add = "median_q1q3",
  add.params = list(size = 0.2),
  width = 0.7,
  position = position_dodge(0.9)
) +
  labs(
    y = "Normalized Translational Efficiency",
    fill = "GLD-1 motif"
  ) +
  scale_x_discrete(labels = c("1-cell", "2-cell", "4-cell", "8-cell")) +
  scale_fill_manual(values = c("present" = "#B6FC9D", "absent" = "white")) +
  theme_pubr() +
  theme(
    legend.position = 'top',
    legend.justification = 'center'
  ) +
  geom_vline(xintercept = seq(1.5, 3.5, by = 1), linetype = "dashed", color = "gray50", size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey", size = 0.5)


#POS-1 motif
gene_TE_graph <- plot_table_long %>%
  mutate(gene_binding = if_else(get("motif_count_pos_1") > 0, "present", "absent"))
# Create the plot
pos_1_motif_plot <- ggviolin(
  gene_TE_graph,
  x = "stage",
  y = "TE_value",
  fill = "gene_binding",
  add = "median_q1q3",
  add.params = list(size = 0.2),
  width = 0.7,
  position = position_dodge(0.9)
) +
  labs(
    y = "Normalized Translational Efficiency",
    fill = "POS-1 motif"
  ) +
  scale_x_discrete(labels = c("1-cell", "2-cell", "4-cell", "8-cell")) +
  scale_fill_manual(values = c("present" = "#B6FC9D", "absent" = "white")) +
  theme_pubr() +
  theme(
    legend.position = 'top',
    legend.justification = 'center'
  ) +
  geom_vline(xintercept = seq(1.5, 3.5, by = 1), linetype = "dashed", color = "gray50", size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey", size = 0.5)


#MEX-3 motif
gene_TE_graph <- plot_table_long %>%
  mutate(gene_binding = if_else(get("motif_count_mex_3") > 0, "present", "absent"))
# Create the plot
mex_3_motif_plot <- ggviolin(
  gene_TE_graph,
  x = "stage",
  y = "TE_value",
  fill = "gene_binding",
  add = "median_q1q3",
  add.params = list(size = 0.2),
  width = 0.7,
  position = position_dodge(0.9)
) +
  labs(
    y = "Normalized Translational Efficiency",
    fill = "MEX-3 motif"
  ) +
  scale_x_discrete(labels = c("1-cell", "2-cell", "4-cell", "8-cell")) +
  scale_fill_manual(values = c("present" = "#B6FC9D", "absent" = "white")) +
  theme_pubr() +
  theme(
    legend.position = 'top',
    legend.justification = 'center'
  ) +
  geom_vline(xintercept = seq(1.5, 3.5, by = 1), linetype = "dashed", color = "gray50", size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey", size = 0.5)



#LIN-41 motif
gene_TE_graph <- plot_table_long %>%
  mutate(gene_binding = if_else(get("motif_count_lin_41") > 0, "present", "absent"))
# Create the plot
lin_41_motif_plot <- ggviolin(
  gene_TE_graph,
  x = "stage",
  y = "TE_value",
  fill = "gene_binding",
  add = "median_q1q3",
  add.params = list(size = 0.2),
  width = 0.7,
  position = position_dodge(0.9)
) +
  labs(
    y = "Normalized Translational Efficiency",
    fill = "LIN-41 motif"
  ) +
  scale_x_discrete(labels = c("1-cell", "2-cell", "4-cell", "8-cell")) +
  scale_fill_manual(values = c("present" = "#B6FC9D", "absent" = "white")) +
  theme_pubr() +
  theme(
    legend.position = 'top',
    legend.justification = 'center'
  ) +
  geom_vline(xintercept = seq(1.5, 3.5, by = 1), linetype = "dashed", color = "gray50", size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey", size = 0.5)


```

We woud also like to show that in OMA-1 mutants, OMA-1 bound trascripts have changed TE

```{r}
plot_table_long <- pivot_longer(plot_table, 
                                cols = c("oma_one_cell_TE", "oma_two_cell_TE", "oma_four_cell_TE"),
                                names_to = "stage", 
                                values_to = "TE_value")


# Set the correct order of stages
plot_table_long$stage <- factor(plot_table_long$stage,
                                levels = c("oma_one_cell_TE", "oma_two_cell_TE", "oma_four_cell_TE"))
# OMA-1 Violin plot 
gene_TE_graph <- plot_table_long %>%
  mutate(gene_binding = if_else(get("oma_pull_down") > 0, "bound", "unbound"))
# Create the plot
OMA_1_pull_down_mutant <- ggviolin(
  gene_TE_graph,
  x = "stage",
  y = "TE_value",
  fill = "gene_binding",
  add = "median_q1q3",
  add.params = list(size = 0.2),
  width = 0.7,
  position = position_dodge(0.9)
) +
  labs(
    y = "Normalized Translational Efficiency",
    fill =  "OMA-1 pull-down"
  ) +
  scale_x_discrete(labels = c("1-cell", "2-cell", "4-cell", "8-cell")) +
  scale_fill_manual(values = c("bound" = "#B6FC9D", "unbound" = "white")) +
  my_custom_theme()+
 theme(
    legend.position = 'top',
    legend.justification = 'center'
  ) +
  geom_vline(xintercept = seq(1.5, 3.5, by = 1), linetype = "dashed", color = "gray50", size = 0.5) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey", size = 0.5)
  

OMA_1_pull_down_mutant 
```

# Clustering Analysis

## Wild-type

```{r}
# Set seed for reproducibility
set.seed(123)

# Prepare the data
wt_data <- averaged_clr_TE[, c(1,2:5)]
colnames(wt_data) <- c("gene_name", "1", "2", "4", "8")

# Function to prepare data
prepare_data <- function(data) {
  gene_names <- data$gene_name
  data_prepared <- as.matrix(data[, -1])  # Exclude the gene_name column
  rownames(data_prepared) <- gene_names
  return(data_prepared)
}

# Function to center the data to mean (for clustering)
center_to_mean <- function(data) {
  return(t(scale(t(data), center = TRUE, scale = FALSE)))
}

# Function to center the data to 1-cell stage (for visualization)
center_to_1cell <- function(data) {
  return(t(apply(data, 1, function(row) row - row[1])))
}

# Function to convert numbers to Roman numerals
to_roman <- function(x) {
  roman <- as.roman(x)
  return(as.character(roman))
}

wt_prepared <- prepare_data(wt_data)
wt_centered_mean <- center_to_mean(wt_prepared)
wt_centered_1cell <- center_to_1cell(wt_prepared)

# Perform clustering on mean-centered data
cluster_data <- function(data, k = 9) {
  set.seed(123)  # for reproducibility
  km <- kmeans(data, centers = k)
  return(km$cluster)
}

wt_clusters <- cluster_data(wt_centered_mean)

combined_results <- data.frame(
  gene_name = rownames(wt_prepared),
  wt_cluster = wt_clusters
)

# Prepare 1-cell centered data for plotting
plot_data <- as.data.frame(wt_centered_1cell) %>%
  mutate(gene_name = rownames(wt_centered_1cell)) %>%
  pivot_longer(cols = c("1", "2", "4", "8"),
               names_to = "stage",
               values_to = "centered_CLR") %>%
  right_join(combined_results, by = "gene_name")

# Calculate cluster profiles
wt_cluster_profiles <- plot_data %>%
  group_by(wt_cluster, stage) %>%
  summarise(
    mean_centered_CLR = mean(centered_CLR, na.rm = TRUE),
    se_value = sd(centered_CLR) / sqrt(n()),
    .groups = "drop"
  )

# Define your desired order

desired_order <- c(1,7,8,5,3,6,2,9,4)   # Modify this to your preferred order

# Count genes in each cluster and create sequential Roman numeral labels
wt_gene_counts <- combined_results %>%
  count(wt_cluster) %>%
  mutate(
    wt_cluster = factor(wt_cluster, levels = desired_order)
  ) %>%
  arrange(wt_cluster) %>%
  mutate(
    # Create sequential Roman numerals based on the new order
    roman_numeral = sapply(1:n(), to_roman),
    label = paste0("Cluster ", roman_numeral, "\n(", n, " genes)")
  )

# Update factor levels according to desired order
wt_cluster_profiles$wt_cluster <- factor(wt_cluster_profiles$wt_cluster, 
                                         levels = desired_order)

# Create the plot
wt_plot <- ggplot(wt_cluster_profiles, aes(x = stage, y = mean_centered_CLR, group = 1)) +
  geom_line(color = "black") +
  geom_pointrange(aes(ymin = mean_centered_CLR - se_value, 
                      ymax = mean_centered_CLR + se_value), 
                  size = 0.1, color = "black") +
  facet_wrap(~ wt_cluster, nrow = 1, 
             labeller = labeller(wt_cluster = setNames(wt_gene_counts$label, wt_gene_counts$wt_cluster))) +
  coord_cartesian(ylim = c(-2.5, 2.5)) +
  labs(
    x = "Cell-stage",
    y = "TE value (relative to 1-cell stage)"
  ) +
  my_custom_theme() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
  theme(
    strip.background = element_rect(fill = "white"),
    strip.text = element_text(size = 8),
    legend.position = "none"
  )

# Display the plot
print(wt_plot)


# check the respective ribooccupancy and RNA
clr_ribo_rna_clust <- merge(averaged_clr_data[,c(1:9)], combined_results, by = "gene_name")

# Step 1: Reshape the data and calculate values relative to one-cell stage
reshaped_data <- clr_ribo_rna_clust %>%
  pivot_longer(
    cols = -c(gene_name, wt_cluster),
    names_to = c("cell_stage", "data_type"),
    names_pattern = "(.*)\\.(ribo|rna)",
    values_to = "value"
  ) %>%
  group_by(gene_name, data_type) %>%
  mutate(
    one_cell_value = value[cell_stage == "one_cell"],
    relative_value = value - one_cell_value
  ) %>%
  ungroup()

# Step 2: Calculate mean and standard error for each cluster, cell stage, and data type
cluster_profiles <- reshaped_data %>%
  group_by(wt_cluster, cell_stage, data_type) %>%
  summarise(
    mean_relative_value = mean(relative_value, na.rm = TRUE),
    se_value = sd(relative_value, na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  ) %>%
  mutate(wt_cluster = factor(wt_cluster, levels = desired_order)) %>%
  mutate(cell_stage = recode(cell_stage,
                             "one_cell" = "1",
                             "two_cell" = "2",
                             "four_cell" = "4",
                             "eight_cell" = "8"))

# Step 3: Count genes in each cluster and create Roman numeral labels
gene_counts <- clr_ribo_rna_clust %>%
  count(wt_cluster) %>%
  mutate(wt_cluster = factor(wt_cluster, levels = desired_order)) %>%
  arrange(wt_cluster) %>%
  mutate(
    roman_numeral = sapply(1:n(), function(x) as.character(as.roman(x))),
    label = paste0("Cluster ", roman_numeral, "\n(", n, " genes)")
  )

# Step 4: Create the plot
ribo_rna_cluster <- ggplot(cluster_profiles, aes(x = cell_stage, y = mean_relative_value, color = data_type, group = data_type)) +
  geom_hline(yintercept = 0, linetype = "dashed", color = "gray") +
  geom_line() +
  geom_pointrange(aes(ymin = mean_relative_value - se_value, 
                      ymax = mean_relative_value + se_value), 
                  size = 0.2) +
  facet_wrap(~ wt_cluster, nrow = 1, 
             labeller = labeller(wt_cluster = setNames(gene_counts$label, gene_counts$wt_cluster))) +
  scale_color_manual(values = c("ribo" = ribo_orange, "rna" = rna_blue),
                    labels = c("ribo" = "Ribosome Occupancy", "rna" = "RNA abundance")) +
  scale_x_discrete(limits = c("1", "2", "4", "8")) +
  coord_cartesian(ylim = c(-2.5, 2.5)) +
  labs(
    y = "Relative Value",
    x = "Cell-stage",
    color = "Data Type"
  ) +
  my_custom_theme() +
  theme(
    strip.background = element_rect(fill = "white"),
    strip.text = element_text(size = 8),
    legend.position = "top",
    legend.justification = "center"
  )

# Create a named vector for cluster renaming
cluster_names <- setNames(
  paste0("Cluster ", sapply(1:length(desired_order), function(x) as.character(as.roman(x)))),
  desired_order
)


background_data <- rnaseq_neb_table[apply(rnaseq_neb_table[,-1] > 1, 1, any)]
background_genes <- background_data$gene_name 

# Create gene lists by cluster using the same order as wt_plot
wt_gene_lists <- lapply(desired_order, function(cluster_num) {
  combined_results %>%
    filter(wt_cluster == cluster_num) %>%
    pull(gene_name)
}) 

# Name the lists with Roman numerals to match the plot
names(wt_gene_lists) <- wt_gene_counts$roman_numeral[match(desired_order, wt_gene_counts$wt_cluster)]

# Step 1: Run compareCluster with Roman numeral labels
wt_enrichment_results <- compareCluster(
  geneClusters = wt_gene_lists,
  fun = "enrichGO",
  OrgDb = org.Ce.eg.db,
  keyType = "SYMBOL",
  ont = "ALL",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.2,
  qvalueCutoff = 0.2,
  universe = background_genes
)


# Step 2: Simplify the results
wt_enrichment_simplified <- simplify(wt_enrichment_results, cutoff= 0.5)

# Step 3: Generate enrichment values
enrichment_df <- as.data.frame(wt_enrichment_simplified) %>%
  mutate(
    # Calculate proper ratios
    GeneRatio_num = as.numeric(sapply(strsplit(GeneRatio, "/"), "[", 1)),
    GeneRatio_denom = as.numeric(sapply(strsplit(GeneRatio, "/"), "[", 2)),
    BgRatio_num = as.numeric(sapply(strsplit(BgRatio, "/"), "[", 1)),
    BgRatio_denom = as.numeric(sapply(strsplit(BgRatio, "/"), "[", 2)),
    # Calculate actual enrichment
    enrichment_ratio = (GeneRatio_num/GeneRatio_denom)/(BgRatio_num/BgRatio_denom)
  ) %>%
  # Sort by Cluster and enrichment_ratio instead of combined score
  arrange(Cluster, desc(enrichment_ratio))

enrichment_df_filter_wt <- enrichment_df |> filter(enrichment_ratio> 2)

#We export this filtered file and then modify it manually. The resulting file is imported:

enrichment_df_mod <- read_csv("./input_data/enrichment_df_modified.csv")




# Calculate term distinctiveness
enrichment_df_mod <- enrichment_df_mod %>%
  group_by(Description) %>%
  mutate(
    max_enrichment = max(enrichment_ratio),
    distinctiveness = enrichment_ratio/max_enrichment,
    sig_clusters = sum(p.adjust < 0.1),
    primary_cluster = Cluster[which.max(enrichment_ratio)]
  ) %>%
  ungroup() %>%
  arrange(primary_cluster, sig_clusters, desc(max_enrichment)) %>%
  mutate(
    # Wrap long descriptions to multiple lines (adjust width as needed)

    Description = factor(Description, 
                         levels = unique(Description))
  )


# Filter to get top terms per cluster with balanced criteria
filtered_df <- enrichment_df_mod %>%
  # First ensure base significance and enrichment
  filter(p.adjust < 0.1, enrichment_ratio > 2) %>%
  # Group by primary cluster and select top terms
  group_by(primary_cluster) %>%
  # Take top 4 terms per cluster 
  # Ordering by combination of significance and enrichment
  slice_head(n = 5) %>%  # This will give us ~36 terms total
  ungroup()

# Create new plot with filtered terms
enrichment_plot_filtered <- ggplot(filtered_df, 
                                   aes(x = factor(Cluster, levels = names(wt_gene_lists)), 
                                       y = Description)) +
  geom_point(aes(size = enrichment_ratio, 
                 color = -log10(p.adjust))) +
  scale_color_gradient(low = UT_BLUE, high = BURNT_ORANGE) +
  scale_size_continuous(range = c(2, 8)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 8, hjust = 1),
    panel.grid.major = element_line(color = "grey90"),
    panel.grid.minor = element_blank(),
    legend.position = "right",
    legend.title = element_text(size = 9),
    legend.text = element_text(size = 8),
    lineheight = 3
  ) +
  labs(
    x = "Cluster",
    y = NULL,
    size = "Enrichment\nRatio",
    color = "-log10(adj.P)"
  )





```

\

## OMA-1 clustering

```{r}
# Set seed for reproducibility
set.seed(123)

# Prepare data function (CLR-transformed data, no scaling needed)
prepare_data <- function(data) {
  gene_names <- data$gene_name
  data_prepared <- as.matrix(data[, -1])
  rownames(data_prepared) <- gene_names
  return(data_prepared)
}

# Normalize to 1-cell stage
normalize_to_1cell <- function(data) {
  normalized <- t(apply(data, 1, function(row) row - row[1]))
  return(normalized)
}

# Function to convert numbers to Roman numerals
to_roman <- function(x) {
  roman <- as.roman(x)
  return(as.character(roman))
}

# Prepare initial data
wt_data <- averaged_clr_TE[, c(1,2:4)]
colnames(wt_data) <- c("gene_name", "1", "2", "4")
wt_data <- merge(wt_data, oma, by='gene_name')

oma_data <- averaged_clr_TE[,c(1,6:8)]
colnames(oma_data) <- c("gene_name", "1", "2", "4")
oma_data <- merge(oma_data, oma, by='gene_name')

# Process data
wt_prepared <- prepare_data(wt_data)
oma_prepared <- prepare_data(oma_data)
wt_normalized <- normalize_to_1cell(wt_prepared)
oma_normalized <- normalize_to_1cell(oma_prepared)

# Clustering function
cluster_data <- function(data, k = 2) {
  km <- kmeans(data, centers = k)
  return(km$cluster)
}

# Perform clustering
wt_clusters <- cluster_data(wt_normalized)
oma_clusters <- cluster_data(oma_normalized)

# Combine results
all_genes <- unique(c(wt_data$gene_name, oma_data$gene_name))
combined_results <- data.frame(
  gene_name = all_genes,
  wt_cluster = NA,
  oma_cluster = NA
)

combined_results$wt_cluster[match(rownames(wt_normalized), combined_results$gene_name)] <- wt_clusters
combined_results$oma_cluster[match(rownames(oma_normalized), combined_results$gene_name)] <- oma_clusters

# Create combined cluster label
combined_results <- combined_results %>%
  mutate(combined_cluster = case_when(
    is.na(wt_cluster) & !is.na(oma_cluster) ~ paste0("OMA_only_", oma_cluster),
    !is.na(wt_cluster) & is.na(oma_cluster) ~ paste0("WT_only_", wt_cluster),
    TRUE ~ paste(wt_cluster, oma_cluster, sep = "_")
  ))

# Define desired order for clusters
multimodal_desired_order <- c("1_1", "1_2", "2_1", "2_2")  # Modify based on your clusters

# Prepare plot data
plot_data <- bind_rows(
  wt_data %>% 
    mutate(condition = "WT") %>%
    pivot_longer(cols = c("1", "2", "4"),
                 names_to = "stage",
                 values_to = "CLR_value"),
  oma_data %>% 
    mutate(condition = "OMA") %>%
    pivot_longer(cols = c("1", "2", "4"),
                 names_to = "stage",
                 values_to = "CLR_value")
) %>%
  right_join(combined_results, by = "gene_name")

# Normalize values
plot_data <- plot_data %>%
  group_by(gene_name, condition) %>%
  mutate(normalized_CLR = CLR_value - CLR_value[stage == "1"]) %>%
  ungroup()

# Update gene counts with desired order
multimodal_gene_counts <- combined_results %>%
  count(combined_cluster) %>%
  mutate(
    combined_cluster = factor(combined_cluster, levels = multimodal_desired_order)
  ) %>%
  arrange(combined_cluster) %>%
  mutate(
    roman_numeral = sapply(1:n(), to_roman),
    label = paste0("Cluster ", roman_numeral, "\n(", n, " genes)")
  )

# Calculate cluster profiles
multimodal_cluster_profiles <- plot_data %>%
  group_by(combined_cluster, condition, stage) %>%
  summarise(
    mean_normalized_CLR = mean(normalized_CLR, na.rm = TRUE),
    se_value = sd(normalized_CLR, na.rm = TRUE) / sqrt(n()),
    .groups = "drop"
  ) %>%
  mutate(combined_cluster = factor(combined_cluster, levels = multimodal_desired_order))

# Create the main plot
multimodal_plot <- ggplot(multimodal_cluster_profiles, 
                          aes(x = stage, y = mean_normalized_CLR, color = condition, group = condition)) +
  geom_line() +
  geom_pointrange(aes(ymin = mean_normalized_CLR - se_value,
                      ymax = mean_normalized_CLR + se_value),
                  size = 0.1) +
  facet_wrap(~ combined_cluster, nrow = 1,
             labeller = labeller(combined_cluster = setNames(multimodal_gene_counts$label,
                                      multimodal_gene_counts$combined_cluster))) +
  coord_cartesian(ylim = c(-2.5, 2.5)) +
  labs(
    x = "Cell-stage",
    y = "TE value (relative to 1-cell stage)",
    color = "Condition"
  ) +
  scale_color_manual(values = c("WT" = "black", "OMA" = "darkgreen")) +
  my_custom_theme() +
  geom_hline(yintercept = 0, linetype = "dashed", color = "grey") +
  theme(
    strip.background = element_rect(fill = "white"),
    strip.text = element_text(size = 8),
    legend.position = "right"
  )

# Create gene lists for enrichment analysis
multimodal_gene_lists <- lapply(multimodal_desired_order, function(cluster) {
  combined_results %>%
    filter(combined_cluster == cluster) %>%
    pull(gene_name)
})
names(multimodal_gene_lists) <- multimodal_gene_counts$roman_numeral[match(multimodal_desired_order, multimodal_gene_counts$combined_cluster)]

# Get background genes
background_data <- rnaseq_neb_table[apply(rnaseq_neb_table[,-1] > 1, 1, any)]
background_genes <- background_data$gene_name 


# Properly name the gene lists
names(multimodal_gene_lists) <- sapply(seq_along(multimodal_gene_lists), function(i) to_roman(i))



# Now run enrichment with named lists
multimodal_enrichment_results <- compareCluster(
  geneClusters = multimodal_gene_lists,
  fun = "enrichGO",
  OrgDb = org.Ce.eg.db,
  keyType = "SYMBOL",
  ont = "ALL",
  pAdjustMethod = "BH",
  pvalueCutoff = 0.2,
  qvalueCutoff = 0.2,
  universe = background_genes
)

# Continue with the rest of the analysis
multimodal_cleaned_results <- simplify(multimodal_enrichment_results)

# Process enrichment data
multimodal_enrichment_df_filtered <- as.data.frame(multimodal_cleaned_results) %>%
  mutate(
    GeneRatio_num = as.numeric(sapply(strsplit(GeneRatio, "/"), "[", 1)),
    GeneRatio_denom = as.numeric(sapply(strsplit(GeneRatio, "/"), "[", 2)),
    BgRatio_num = as.numeric(sapply(strsplit(BgRatio, "/"), "[", 1)),
    BgRatio_denom = as.numeric(sapply(strsplit(BgRatio, "/"), "[", 2)),
    enrichment_ratio = (GeneRatio_num/GeneRatio_denom)/(BgRatio_num/BgRatio_denom)
  ) %>%
  filter(enrichment_ratio > 2)

# Export the enrichment table



# Import modified enrichment table, we edit this manually.
multimodal_enrichment_df_mod <- read_csv("./input_data/multimodal_enrichment_df_modified.csv")

# Calculate term distinctiveness
multimodal_enrichment_df_mod <- multimodal_enrichment_df_mod %>%
  group_by(Description) %>%
  mutate(
    max_enrichment = max(enrichment_ratio),
    distinctiveness = enrichment_ratio/max_enrichment,
    sig_clusters = sum(p.adjust < 0.1),
    primary_cluster = Cluster[which.max(enrichment_ratio)]
  ) %>%
  ungroup() %>%
  arrange(primary_cluster, sig_clusters, desc(max_enrichment)) %>%
  mutate(
    Description = factor(Description, levels = unique(Description))
  )

# Filter for top terms
multimodal_filtered_df <- multimodal_enrichment_df_mod %>%
  filter(p.adjust < 0.2, enrichment_ratio > 2) %>%
  group_by(primary_cluster) %>%
  slice_head(n = 10) %>%
  ungroup()

# Create enrichment plot
multimodal_enrichment_plot <- ggplot(multimodal_filtered_df,
                                     aes(x = factor(Cluster, levels = names(multimodal_gene_lists)),
                                         y = Description)) +
  geom_point(aes(size = enrichment_ratio,
                 color = -log10(p.adjust))) +
  scale_color_gradient(low = UT_BLUE, high = BURNT_ORANGE) +
  scale_size_continuous(range = c(2, 8)) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1),
    axis.text.y = element_text(size = 8, hjust = 1),
    panel.grid.major = element_line(color = "grey90"),
    panel.grid.minor = element_blank(),
    legend.position = "right",
    legend.title = element_text(size = 9),
    legend.text = element_text(size = 8),
    lineheight = 3
  ) +
  labs(
    x = "Cluster",
    y = NULL,
    size = "Enrichment\nRatio",
    color = "-log10(adj.P)"
  )



```

# Figures and Tables

## Figures

### Figure 1

```{r}

figure_1_B <- region_counts_percent_mean_WT_plot  + my_custom_theme()+theme(legend.position = "top",legend.key.size = unit(5, "pt"),    legend.justification = "center",
    legend.box.just = "center",
    legend.text = element_text(size = unit(8,"pt"))) 

figure_1_C <- start_site_wt + stop_site_wt + plot_layout(guides = 'collect',axes  = "collect")  &theme(legend.position = "top",legend.title = element_blank())

figure_1_D <-  (one_cell_correlation+two_cell_correlation+four_cell_correlation+eight_cell_correlation)+ plot_layout(axis_titles =    'collect',ncol = 2,nrow = 2)


Panel_1B_1C <- figure_1_B + figure_1_C +plot_layout(ncol = 1, heights = c(1,2))

panel_1B_1C_1D <- ((Panel_1B_1C )/ figure_1_D ) + plot_layout (nrow = 3,heights = c(1,2,4))

figure_1_E<- one_cell_WT_RNA_vs_RIBO_plot+
  two_cell_WT_RNA_vs_RIBO_plot+
  four_cell_WT_RNA_vs_RIBO_plot+
  eight_cell_WT_RNA_vs_RIBO_plot+
  plot_layout(guides = "collect", axes = "collect", ncol = 4)&theme(legend.position = "none", plot.subtitle = element_text(size = unit(8,"pt")))&xlab("Mean RNA abundance (CPM)")&ylab("Mean Ribosome Occupancy (CPM)")

dir.create("./output/Figures/Figure_1", recursive = TRUE, showWarnings = FALSE)

ggsave(
    "./output/Figures/Figure_1/panel_1B_1C_1D.pdf",
    plot = panel_1B_1C_1D,
    width = 95,
    height =200,
    units = c("mm"),
    dpi = 600,
    bg = NULL)

ggsave(
    "./output/Figures/Figure_1/figure_1_E.pdf",
    plot = figure_1_E,
    width = 180,
    height = 65,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
```

### Figure 2

```{r}

dir.create("./output/Figures/Figure_2", recursive = TRUE, showWarnings = FALSE)

figure_2_A <- plot_RNA_2v1 + plot_TE_2v1 + plot_layout(guides = "collect", axes = 'collect') & theme(legend.position = "none", axis.title.x = element_blank())

figure_2_B  <- plot_RNA_4v2 + plot_TE_4v2 + plot_layout(guides = "collect", axes = 'collect') & theme(legend.position = "none",axis.title.x = element_blank())
figure_2_C<- plot_RNA_8v4 + plot_TE_8v4 + plot_layout(guides = "collect", axes = 'collect') & theme(legend.text = element_text(size = 8,angle = 45, hjust = 1),
          legend.title = element_text(size = 8),
        legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "horizontal"
          )

Panel_2A_2B_2C <-( figure_2_A / figure_2_B  / figure_2_C)+ plot_layout(guides = "collect" , axes = "collect", axis_titles = "collect") 


figure_2_D <- Ribo_vs_RNA_one_to_two_plot+Ribo_vs_RNA_four_to_two_plot + plot_layout(axes = 'collect') & theme( legend.text = element_text(size = 9), plot.subtitle = element_text(hjust = 0.5)) 

 ggsave(
    "./output/Figures/Figure_2/Panel_2A_2B_2C.pdf",
    plot = Panel_2A_2B_2C,
    width = 150,
    height = 200,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
 
  ggsave(
    "./output/Figures/Figure_2/figure_2_D.pdf",
    plot = figure_2_D,
    width = 180,
    height = 70,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 

```

### Figure 3

```{r}

dir.create("./output/Figures/Figure_3", recursive = TRUE, showWarnings = FALSE)

Figure_3_A <- wt_plot 
Figure_3_B <- enrichment_plot_filtered 

  ggsave(
    "./output/Figures/Figure_3/Figure_3_A.pdf",
    plot = Figure_3_A,
    width = 185,
    height = 45,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
  
    ggsave(
    "./output/Figures/Figure_3/Figure_3_B.pdf",
    plot = Figure_3_B,
    width = 185,
    height = 220,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
```

### Figure 4

```{r}

dir.create("./output/Figures/Figure_4", recursive = TRUE, showWarnings = FALSE)
Figure_4_A <- somatic_vs_germline_TE  
Figure_4_B <- localization_of_mrna 
  
Panel_4A_4B <- Figure_4_A + Figure_4_B + plot_layout(axis_titles = 'collect',nrow = 1, ncol = 2, widths  = c(1.5, 2)) 

ggsave(
    "./output/Figures/Figure_4/Panel_4A_4B.pdf",
    plot = Panel_4A_4B,
    width = 180,
    height =100,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 




```

### Figure 5

```{r}
dir.create("./output/Figures/Figure_5", recursive = TRUE, showWarnings = FALSE)
Figure_5_A <- OMA_1_pull_down
Figure_5_C <-  plot_TE_W1vO1 + plot_TE_W2vO2_oma + plot_TE_W4vO4_oma +plot_layout(axes = 'collect', guides = "collect") & ylab("log2FC TE")  & theme(legend.text = element_text(size = 8,angle = 45, hjust = 1),
          legend.title = element_text(size = 8),
        legend.position = "bottom",
legend.direction = "horizontal",
legend.box = "horizontal"
          )


ggsave(
    "./output/Figures/Figure_5/Figure_5_A.pdf",
    plot = Figure_5_A ,
    width = 100,
    height =100,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
ggsave(
    "./output/Figures/Figure_5/Figure_5_C.pdf",
    plot = Figure_5_C ,
    width = 200,
    height =100,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
```

### Figure 6

```{r}
dir.create("./output/Figures/Figure_6", recursive = TRUE, showWarnings = FALSE)

  
Figure_6_A <- plot_TE_O2vO1 + plot_table_logFC_2v1_bound & theme(legend.position = "none")  

Figure_6_B <- plot_TE_O4vO2 + plot_table_logFC_4v2_OMA_change_bound & theme(legend.position = "bottom", legend.justification = "center") 
  

Panel_6A_6B <- Figure_6_A/Figure_6_B

ggsave(
    "./output/Figures/Figure_6/Panel_6A_6B.pdf",
    plot = Panel_6A_6B,
    width = 180,
    height =180,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 

```

### Figure 7

```{r}

dir.create("./output/Figures/Figure_7", recursive = TRUE, showWarnings = FALSE)
Figure_7_A <- multimodal_plot
Figure_7_B <- multimodal_enrichment_plot



ggsave( "./output/Figures/Figure_7/Figure_7_A.pdf",multimodal_plot, width = 180, height = 75, units = "mm", dpi = 600, limitsize = F)
ggsave( "./output/Figures/Figure_7/Figure_7_B.pdf",Figure_7_B , width = 180, height = 150, units = "mm", dpi = 600, limitsize = F)
```

### Figure S1

```{r}

dir.create("./output/Figures/Figure_S1", recursive = TRUE, showWarnings = FALSE)
Figure_S1_A <- read_length_distribution_plot +theme(legend.position = "top",legend.justification = "center", legend.title = element_blank()) 
Figure_S1_B <- WT_ribo_correlation 
Figure_S1_C <- Ribo_mds_plot + labs(subtitle = "Ribosome Occupancy") + theme(plot.subtitle = element_text(hjust = 0.5))
Figure_S1_D <- WT_rna_correlation
Figure_S1_E <- RNA_MDS_plot +labs(subtitle = "RNA Abundance")+ theme(plot.subtitle = element_text(hjust = 0.5))
Figure_S1_F <- combined_plot_8_cell

Panel_S1_C_S1_E <-  Figure_S1_C + Figure_S1_E + plot_layout(ncol =1, guides = 'collect') & theme(legend.position = 'bottom',
    legend.box = "vertical",      
    legend.spacing = unit(0.1, "cm"), 
    legend.box.just = "left"  ,
    legend.justification = "center"
  )

Panel_S1_A_S1_C_S1_E <- Figure_S1_A + Panel_S1_C_S1_E  + 
  plot_layout(ncol = 1, heights = c(1, 4))


Panel_S1_B_S1_D <- Figure_S1_B + Figure_S1_D + plot_layout(ncol=1, guides = 'collect') & theme(legend.position = "bottom", legend.justification = "center")


 ggsave(
    "./output/Figures/Figure_S1/Panel_S1_A_S1_C_S1_E.pdf",
    plot = Panel_S1_A_S1_C_S1_E,
    width = 95,
    height =180,
    units = c("mm"),
    dpi = 600,
    bg = NULL)
 
  ggsave(
    "./output/Figures/Figure_S1/Panel_S1_B_S1_D.pdf",
    plot = Panel_S1_B_S1_D,
    width = 95,
    height =180,
    units = c("mm"),
    dpi = 600,
    bg = NULL)
  ggsave(
    "./output/Figures/Figure_S1/Figure_S1_F.pdf",
    plot = Figure_S1_F,
    width =185,
    height =90,
    units = c("mm"),
    dpi = 600,
    bg = NULL)
 
 
```

### Figure S2

```{r}
dir.create("./output/Figures/Figure_S2", recursive = TRUE, showWarnings = FALSE)
plot_Ribo_2v1 <- plot_Ribo_2v1 + labs(subtitle = "2-cell vs 1-cell")
plot_Ribo_4v2 <- plot_Ribo_4v2 + labs(subtitle = "4-cell vs 2-cell")
plot_Ribo_8v4 <- plot_Ribo_8v4 + labs(subtitle = "8-cell vs 4-cell")
Figure_S2_A <- plot_Ribo_2v1 + plot_Ribo_4v2 + plot_Ribo_8v4 + plot_layout(axes = 'collect', guides = 'collect') & ylab("Log2(FC) Ribosome Occupancy")



ggsave(
    "./output/Figures/Figure_S2/Figure_S2_A.pdf",
    plot = Figure_S2_A,
    width =180,
    height =90,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
```

### Figure S3

```{r}
dir.create("./output/Figures/Figure_S3", recursive = TRUE, showWarnings = FALSE)
Figure_S3_A <- ribo_rna_cluster
Figure_S3_B <- example_from_publication 
Figure_S3_C <- nucleoporin 



Panel_S3A_S3B_S3C <- Figure_S3_A /(Figure_S3_B| Figure_S3_C) + plot_layout(heights = c(1,2.5), axes = 'collect')


ggsave(
    "./output/Figures/Figure_S3/Panel_S3A_S3B_S3C.pdf",
    plot = Panel_S3A_S3B_S3C,
    width =180,
    height =150,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
```

### Figure S4

```{r}

dir.create("./output/Figures/Figure_S4", recursive = TRUE, showWarnings = FALSE)
Figure_S4_A <- gld_1_pull_down 
Figure_S4_B <- pos_1_motif_plot
Figure_S4_C <- mex_3_motif_plot 
Figure_S4_D <- gld_1_motif_plot
Figure_S4_E <- lin_41_motif_plot 

Panel_S4 <- wrap_plots(Figure_S4_A,Figure_S4_B,Figure_S4_C,Figure_S4_D,Figure_S4_E) + plot_layout(axis_titles = 'collect', ncol = 2)

ggsave(
    "./output/Figures/Figure_S4/Panel_S4.pdf",
    plot = Panel_S4,
    width =180,
    height =220,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 

```

### Figure S5

```{r}
dir.create("./output/Figures/Figure_S5", recursive = TRUE, showWarnings = FALSE)
Figure_S5_A <- region_counts_percent_mean_OMA_plot

Figure_S5_B <- start_site_OMA  + stop_site_OMA + plot_layout(guides = 'collect',axes  = "collect")  &theme(legend.position = "top")

Figure_S5_C <- read_length_distribution_plot_OMA +theme(legend.position = "top",legend.justification = "center")

Figure_S5_D <- OMA_ribo_correlation
Figure_S5_E <- OMA_rna_correlation
Figure_S5_F <- OMA_1_pull_down_mutant 
Figure_S5_G <- oma_one_cell_WT_RNA_vs_RIBO_plot+
  oma_two_cell_WT_RNA_vs_RIBO_plot+
  oma_four_cell_WT_RNA_vs_RIBO_plot+
  plot_layout(guides = "collect", axes = "collect", ncol = 3)&theme(legend.position = "none", plot.subtitle = element_text(size = unit(8,"pt")))&xlab("Mean RNA abundance (CPM)")&ylab("Mean Ribosome Occupancy (CPM)") 


Panel_S5A_S5B_S5C_S5F <- Figure_S5_A + Figure_S5_B + Figure_S5_C +Figure_S5_F + plot_layout(ncol = 1)

Panel_S5D_S5E <- Figure_S5_D + Figure_S5_E  +plot_layout(ncol = 1, guides = 'collect') & theme(legend.position = "bottom", legend.justification = "center")

Panel_S5D_S5E_S5G <-wrap_plots( Panel_S5D_S5E,Figure_S5_G ) + plot_layout(ncol =1,heights = c(3, 1) )

ggsave(
    "./output/Figures/Figure_S5/Panel_S5A_S5B_S5C_S5F.pdf",
    plot = Panel_S5A_S5B_S5C_S5F ,
    width =95,
    height =290,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 
ggsave(
    "./output/Figures/Figure_S5/Figure_S5_G.pdf",
    plot = Figure_S5_G ,
    width =110,
    height =60,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 

ggsave(
    "./output/Figures/Figure_S5/Panel_S5D_S5E.pdf",
    plot = Panel_S5D_S5E ,
    width =110,
    height =60,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 




```

### Figure S6

```{r}
dir.create("./output/Figures/Figure_S6", recursive = TRUE, showWarnings = FALSE)
plot_RNA_W1vO1 <- plot_RNA_W1vO1 + labs(subtitle = "RNA abundance")
plot_Ribo_W1vO1 <-plot_Ribo_W1vO1 + labs(subtitle = "Ribosome Occupancy")

# Remove x-axis titles from all but the bottom plots
plot_RNA_W1vO1 <- plot_RNA_W1vO1 + theme(axis.title.x = element_blank())
plot_Ribo_W1vO1 <- plot_Ribo_W1vO1 + theme(axis.title.x = element_blank())

plot_RNA_W2vO2 <- plot_RNA_W2vO2 + theme(axis.title.x = element_blank())
plot_Ribo_W2vO2 <- plot_Ribo_W2vO2 + theme(axis.title.x = element_blank())

plot_RNA_W4vO4 <- plot_RNA_W4vO4 + theme(axis.title.x = element_blank())
plot_Ribo_W4vO4 <- plot_Ribo_W4vO4 + theme(axis.title.x = element_blank())

plot_RNA_O2vO1 <- plot_RNA_O2vO1 + theme(axis.title.x = element_blank())
plot_Ribo_O2vO1 <- plot_Ribo_O2vO1 + theme(axis.title.x = element_blank())

# Don't modify x-axis titles for the bottom row (O4vO2)

# Create the combined figure
Panel_S6_raw <- (
  (plot_RNA_W1vO1 + plot_Ribo_W1vO1 + plot_layout(nrow = 1)) /
  (plot_RNA_W2vO2 + plot_Ribo_W2vO2 + plot_layout(nrow = 1)) /
  (plot_RNA_W4vO4 + plot_Ribo_W4vO4 + plot_layout(nrow = 1)) /
  (plot_RNA_O2vO1 + plot_Ribo_O2vO1 + plot_layout(nrow = 1)) /
  (plot_RNA_O4vO2 + plot_Ribo_O4vO2 + plot_layout(nrow = 1))
)

# Final panel with collected guides at bottom
Panel_S6 <- Panel_S6_raw + 
  plot_layout(guides = "collect",) & 
  theme(legend.position = "bottom")

ggsave(
    "./output/Figures/Figure_S6/Panel_S6.pdf",
    plot = Panel_S6 ,
    width =180,
    height =270,
    units = c("mm"),
    dpi = 600,
    bg = NULL) 

```

## Tables

```{r}
dir.create("./output/Tables", recursive = TRUE, showWarnings = FALSE)
#Ribo-counts
write_csv(rcw_ribo,"./output/Tables/ribo_counts.csv")

#RNAseq Counts
write_csv(rnaseq_w_diff,"./output/Tables/RNA_counts.csv")
#All-counts-together
all_counts_diff = merge(rnaseq_w_diff, rcw_ribo, by= "transcript")
write_csv(all_counts_diff,"./output/Tables/all_table_counts.csv")

#wt_enrichment_results
wt_enrichment_export <- wt_enrichment_results@compareClusterResult
write_csv(wt_enrichment_export,"./output/Tables/wt_enrichment.csv") 

write_csv(enrichment_df_filter_wt, "./output/Tables/wt_enrichment_filtered.csv")
#oma_wt_enrichemnt_results 
oma_wt_enrichment_export <-enrichment_results@compareClusterResult
write_csv(oma_wt_enrichment_export,"./output/Tables/oma_wt_enrichment.csv") 

write_csv(multimodal_enrichment_df_filtered, "./output/Tables/multimodal_enrichment_df.csv")
```
